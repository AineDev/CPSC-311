#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.4 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 103 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"SimSun-ExtB\0"
0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 -1 1 #"\0"
0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 32
#"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 59 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 190 190 190 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 107 142 35 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 100 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 100 149 237 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 65 105 225 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 70 130 180 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 47 79 79 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 139 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 75 0 130 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 160 32 240 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 250 128 114 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 184 134 11 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 128 128 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 169 169 169 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 228 225 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 0 0 224 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 224 255 255 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 0 0 255 228 225 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 255 224 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 255 255 228 225 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 107 142 35 224 255 255 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 107 142 35 255 228 225 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 100 0 224 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 100 0 255 228 225 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 70 130 180 224 255 255 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 47 79 79 255 228 225 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 139 255 228 225 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 75 0 130 255 228 225 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 75 0 130 224 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 70 130 180 255 228 225 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 250 128 114 224 255 255 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 184 134 11 255 228 225 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 128 128 0 255 228 225 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 169 169 169 255 228 225 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 169 169 169 224 255 255 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 250 128 114 255 228 225 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 0 0 0 0 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 2999 0 28 3 10 #"#lang plai"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";; NOTE: We expect not to grade roughly two of the eight questions,"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; but we're not saying which ones, and they're all good for practic"
 #"e!"
) 0 0 24 29 1 #"\n"
0 0 17 3 5 #";; :)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";; Running this will make it so that only the failed tests print out"
 #":"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 17 #"print-only-errors"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";;;; PROBLEM #1 ;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";; Complete the function.  There's some messy math here,"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; but the real point is to look up help in the Racket"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; documentation! :)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; fermat-primality-test : positive positive -> bool"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";; Given an integer a >= 2 and an integer n > a, determine"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; whether the remainder when we divide a^(n-1) by n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; is equal to 1. Note that a^(n-1) is a raised to the"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; power of n-1."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";; It isn't important for our purposes to know this, but"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; the Fermat primality test is a step toward a good"
0 0 24 29 1 #"\n"
0 0 17 3 57
#";; \"probabilistic primality test\", trying to test whether"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";; n is prime. As is, the test is \"complete but not sound\""
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; meaning that if it says false, it's correct, but if"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; it says true, it may be incorrect."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";; Hint: look up the identifier \"expt\" in the helpdesk."
0 0 24 29 1 #"\n"
0 0 17 3 53 #";; Then, look up (or just look around from there) for"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; \"remainder\"."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";; positive positive -> Boolean"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 2 #"fe"
0 0 14 3 1 #"r"
0 0 14 3 18 #"mat-primality-test"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 17 3 5 #"; 2 4"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; Smallest case"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 21 #"fermat-primality-test"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #"; A false case"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 21 #"fermat-primality-test"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; A few extra true and false cases, including one that shows"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; that this is not a sound primality test!"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 21 #"fermat-primality-test"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 21 #"fermat-primality-test"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 21 #"fermat-primality-test"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 21 #"fermat-primality-test"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 3 #"341"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";;;; PROBLEM #2 ;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; Complete the function.  "
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";; You'll certainly want to look up string functions to make this wo"
 #"rk."
) 0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";; You could also convert the strings to lists and work with them in"
 #" that form!"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; match-length : string string -> natural"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #";; Compute the number of letters exactly matching at the start of th"
 #"e two strings"
) 0 0 24 29 1 #"\n"
0 0 17 3 33 #";; (before there's a difference)."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 65
(
 #";; E.g., (match-length \"wesselton\" \"weasel-town\") evaluates to 2"
 #"."
) 0 0 24 29 1 #"\n"
0 9         229 21           0 0           0 37 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"match-length"
0 0 24 3 1 #" "
0 0 14 3 7 #"string1"
0 0 24 3 1 #" "
0 0 14 3 7 #"string2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 67
#"; Feel free NOT to use the provided local variable definition here:"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"shorter-len"
0 0 24 3 2 #" ("
0 0 14 3 3 #"min"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 24 3 1 #" "
0 0 14 3 7 #"string1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 13 #"string-length"
0 0 24 3 1 #" "
0 0 14 3 7 #"string2"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 14 3 4 #"TODO"
0 0 24 3 2 #"))"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"match-length"
0 0 24 3 1 #" "
0 0 14 3 7 #"string1"
0 0 24 3 1 #" "
0 0 14 3 7 #"string2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"loc"
0 0 15 3 2 #"al"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"compare-strings"
0 0 24 3 1 #" "
0 0 14 3 7 #"string1"
0 0 24 3 1 #" "
0 0 14 3 7 #"string2"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 1 #" "
0 0 14 3 3 #"max"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 6 #"string"
0 0 14 3 1 #"-"
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 7 #"string1"
0 0 24 3 2 #") "
0 0 14 3 3 #"min"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  [("
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 24 3 1 #" "
0 0 14 3 7 #"string2"
0 0 24 3 2 #") "
0 0 14 3 3 #"min"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 14 3 7 #"string1"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 1 #" "
0 0 14 3 3 #"max"
0 0 24 3 3 #") ("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 14 3 7 #"string2"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 1 #" "
0 0 14 3 3 #"max"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 15 #"compare-strings"
0 0 24 3 1 #" "
0 0 14 3 7 #"string1"
0 0 24 3 1 #" "
0 0 14 3 7 #"string2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 3 #") ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 3 #"max"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 21 3 1 #"0"
0 0 24 3 5 #")]))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"compare-strings"
0 0 24 3 1 #" "
0 0 14 3 7 #"string1"
0 0 24 3 1 #" "
0 0 14 3 7 #"string2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; Trivial cases."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 12 #"match-length"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 12 #"match-length"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"elsa\""
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 12 #"match-length"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"elsa\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; Simple one-character match/non-match."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 12 #"match-length"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 12 #"match-length"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"b\""
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; Matching prefixes."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 12 #"match-length"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"wesselton\""
0 0 24 3 1 #" "
0 0 19 3 13 #"\"weasel-town\""
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; One is a prefix of the other."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 12 #"match-length"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"weasel\""
0 0 24 3 1 #" "
0 0 19 3 13 #"\"weasel-town\""
0 0 24 3 2 #") "
0 0 21 3 1 #"6"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 12 #"match-length"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"weasel-town\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"weasel\""
0 0 24 3 2 #") "
0 0 21 3 1 #"6"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; Exactly matching longer strings."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 12 #"match-length"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Sven\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Sven\""
0 0 24 3 2 #") "
0 0 21 3 1 #"4"
0 0 24 3 3 #")  "
0 0 17 3 21 #"; they're both Sven?!"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #"; Case matters"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 12 #"match-length"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";;;; PROBLEM #3 ;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; Complete the function.  You'll want to remind yourself of"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; some list functions for this one!"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; interleave : (listof any?) (listof any?) -> (listof any?)"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; Interleave the elements of list1 and list2."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";; So, give back a list with the first element of list1, then the"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; first of list2, then the second of list1, then the second of list"
 #"2,"
) 0 0 24 29 1 #"\n"
0 0 17 3 13 #";; and so on."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; If one list ends before the other, include all leftover elements "
 #"of"
) 0 0 24 29 1 #"\n"
0 0 17 3 27 #";; the other list in a row."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"interleave"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"interleave"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 2 #") "
0 0 14 3 5 #"list2"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 2 #") "
0 0 14 3 5 #"list1"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 3 #") ("
0 0 14 3 10 #"interleave"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 2 #") "
0 0 14 3 5 #"list2"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 3 #") ("
0 0 14 3 10 #"interleave"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 7 #")))]))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"interleave"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; We could make a tail-recursive version, but we would have to"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";; reverse the result at the end; so, it doesn't seem that compellin"
 #"g. :)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; Besides, that implementation above is just too beautiful!"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; A 4-case solution is very natural and also definitely great!"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 10 #"interleave"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 10 #"interleave"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 10 #"interleave"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 10 #"interleave"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"2"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 10 #"interleave"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 10 #"interleave"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"2"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 10 #"interleave"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 10 #"interleave"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; Not just numbers!"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 10 #"interleave"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 3 #"\"a\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"and a\""
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"and a\""
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"and a\""
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"and a\""
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";;;; PROBLEM #4 ;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; Complete the function.  More list practice!"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; contains-sequence : (list-of symbol?) (list-of symbol?) -> boolea"
 #"n?"
) 0 0 24 29 1 #"\n"
0 0 17 3 118
(
 #";; Determine whether data contains the elements from sequence in ord"
 #"er (but not necessarily right next to each other)."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"contains-sequence"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 17 #"contains-sequence"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 17 #"contains-sequence"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"data"
0 0 24 3 2 #") "
0 0 15 3 8 #"sequence"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; True tests, trivial though complex"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; plus repeated symbols."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 17 #"contains-sequence"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 17 #"contains-sequence"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 17 #"contains-sequence"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 3 #")) "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 17 #"contains-sequence"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"b"
0 0 24 3 3 #")) "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 17 #"contains-sequence"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #")) "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 17 #"contains-sequence"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")) "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 17 #"contains-sequence"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #")) "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 17 #"contains-sequence"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #")) "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; False test, trivial though complex."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 17 #"contains-sequence"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 3 #")) "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 17 #"contains-sequence"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"b"
0 0 24 3 3 #")) "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 17 #"contains-sequence"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #")) "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 17 #"contains-sequence"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #")) "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";;;; PROBLEM #5 ;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; Thoroughly test this function.  Do NOT use check-expect.  "
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; Use plai's test construct instead."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; You can find documentation on define-type, type"
0 0 17 3 1 #"-"
0 0 17 3 14 #"case, and test"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";; in the plai documentation in DrRacket's helpdesk. You can also"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; find discussion of them in the textbook in Chapters 1 and 3."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 6 #"Thingy"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 8 #"a-thingy"
0 0 24 3 2 #" ("
0 0 14 3 7 #"really?"
0 0 24 3 1 #" "
0 0 14 3 8 #"boolean?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 12 #"other-thingy"
0 0 24 3 2 #" ("
0 0 14 3 3 #"no?"
0 0 24 3 1 #" "
0 0 14 3 8 #"boolean?"
0 0 24 3 3 #") ("
0 0 14 3 6 #"maybe?"
0 0 24 3 1 #" "
0 0 14 3 8 #"boolean?"
0 0 24 3 3 #") ("
0 0 14 3 10 #"sub-thingy"
0 0 24 3 1 #" "
0 0 14 3 7 #"Thingy?"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; all-thingied : Thingy -> boolean?"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; Determines whether all the booleans in the Thingy are true."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";; Note: type-case is REALLY handy for functions over define-type ty"
 #"pes."
) 0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #";; However, you can also access fields with functions like other-thi"
 #"ngy-sub-thingy"
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";; which, given an other-thingy returns its sub-thingy field. This f"
 #"eels"
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";; similar to dotted notation in many C-like syntaxes, except that t"
 #"he whole"
) 0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";; thing is just a single identifier (not two syntactic pieces conne"
 #"cted by"
) 0 0 24 29 1 #"\n"
0 0 17 3 19 #";; a dot operator)."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"all-thingied"
0 0 24 3 1 #" "
0 0 14 3 6 #"thingy"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 6 #"Thingy"
0 0 24 3 1 #" "
0 0 14 3 6 #"thingy"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 8 #"a-thingy"
0 0 24 3 2 #" ("
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 14 3 1 #"b"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 12 #"other-thingy"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 14 3 10 #"sub-thingy"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #" ("
0 0 14 3 12 #"all-thingied"
0 0 24 3 1 #" "
0 0 14 3 10 #"sub-thingy"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; Here's one test. You supply the rest! Make a thorough but"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; reasonably parsimonious list."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 12 #"all-thingied"
0 0 24 3 2 #" ("
0 0 14 3 8 #"a-thingy"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 3 #")) "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 12 #"all-thingied"
0 0 24 3 2 #" ("
0 0 14 3 8 #"a-thingy"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 3 #")) "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 12 #"all-thingied"
0 0 24 3 2 #" ("
0 0 14 3 12 #"other-thingy"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #" ("
0 0 14 3 12 #"other-thingy"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #" ("
0 0 14 3 8 #"a-thingy"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 5 #")))) "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 12 #"all-thingied"
0 0 24 3 2 #" ("
0 0 14 3 12 #"other-thingy"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #" ("
0 0 14 3 12 #"other-thingy"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #" ("
0 0 14 3 8 #"a-thingy"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 5 #")))) "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 12 #"all-thingied"
0 0 24 3 2 #" ("
0 0 14 3 12 #"other-thingy"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 2 #" ("
0 0 14 3 12 #"other-thingy"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #" ("
0 0 14 3 8 #"a-thingy"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 5 #")))) "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 12 #"all-thingied"
0 0 24 3 2 #" ("
0 0 14 3 12 #"other-thingy"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #" ("
0 0 14 3 12 #"other-thingy"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #" ("
0 0 14 3 8 #"a-thingy"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 5 #")))) "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 12 #"all-thingied"
0 0 24 3 2 #" ("
0 0 14 3 12 #"other-thingy"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #" ("
0 0 14 3 12 #"other-thingy"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 2 #" ("
0 0 14 3 8 #"a-thingy"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 5 #")))) "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 12 #"all-thingied"
0 0 24 3 2 #" ("
0 0 14 3 12 #"other-thingy"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #" ("
0 0 14 3 12 #"other-thingy"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #" ("
0 0 14 3 8 #"a-thingy"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 5 #")))) "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";;;; PROBLEM #6 ;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";; Time for define-type.  This is a big one."
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; find-species works well with a HtDP-like \"template\" approach."
0 0 24 29 1 #"\n"
0 0 17 3 49 #";; is-extinct? should be easy using find-species."
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; common-ancestor is fairly tricky, but let the test cases guide yo"
 #"u!"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";; Complete find-species, is-extinct?, and common-ancestor."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";; The \"tree of life\" is the biological tree of species charting "
0 0 24 29 1 #"\n"
0 0 17 3 45 #";; the evolution of one species from another."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 12 #"tree-of-life"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 2 #"em"
0 0 14 3 1 #"p"
0 0 14 3 7 #"ty-tree"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 7 #"species"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 7 #"string?"
0 0 24 3 3 #") ("
0 0 14 3 8 #"extinct?"
0 0 24 3 1 #" "
0 0 14 3 8 #"boolean?"
0 0 24 3 3 #") ("
0 0 14 3 6 #"child1"
0 0 24 3 1 #" "
0 0 14 3 13 #"tree-of-life?"
0 0 24 3 3 #") ("
0 0 14 3 6 #"child2"
0 0 24 3 1 #" "
0 0 14 3 13 #"tree-of-life?"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"human-species-ToL"
0 0 24 3 2 #" ("
0 0 14 3 7 #"species"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"human\""
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 2 #" ("
0 0 14 3 10 #"empty-tree"
0 0 24 3 3 #") ("
0 0 14 3 10 #"empty-tree"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"troll-species-ToL"
0 0 24 3 2 #" ("
0 0 14 3 7 #"species"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"troll\""
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #" ("
0 0 14 3 10 #"empty-tree"
0 0 24 3 3 #") ("
0 0 14 3 10 #"empty-tree"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"three-species-ToL"
0 0 24 3 2 #" ("
0 0 14 3 7 #"species"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"missing-link\""
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 14 3 17 #"human-species-ToL"
0 0 24 3 1 #" "
0 0 14 3 17 #"troll-species-ToL"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; find-species : string tree-of-life -> (or false tree-of-life)"
0 0 24 29 1 #"\n"
0 0 17 3 100
(
 #";; Produces the tree-of-life node representing the named species if "
 #"it exists. Else, produces false."
) 0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";; (Note: we could actually make the return type more specific: it's"
 #" false or species.)"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 95
(
 #";; Precondition: the species with the given name appears AT MOST onc"
 #"e (i.e., zero or one time)."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-species"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 12 #"tree-of-life"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 10 #"empty-tree"
0 0 24 3 4 #" () "
0 0 14 3 5 #"false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 7 #"species"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 2 #"c1"
0 0 24 3 1 #" "
0 0 14 3 2 #"c2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 14 3 4 #"tree"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"false?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-species"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 2 #"c1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 12 #"find-species"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 2 #"c2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 12 #"find-species"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 2 #"c1"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 17 3 100
(
 #"; Oh my god this is so inefficient it hurts, I'm gonna try and make "
 #"it better later (probably maybe)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-species"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"elsa\""
0 0 24 3 2 #" ("
0 0 14 3 10 #"empty-tree"
0 0 24 3 3 #")) "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-species"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"elsa\""
0 0 24 3 1 #" "
0 0 14 3 17 #"human-species-ToL"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-species"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"elsa\""
0 0 24 3 1 #" "
0 0 14 3 17 #"three-species-ToL"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-species"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"human\""
0 0 24 3 1 #" "
0 0 14 3 17 #"human-species-ToL"
0 0 24 3 2 #") "
0 0 14 3 17 #"human-species-ToL"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-species"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"human\""
0 0 24 3 1 #" "
0 0 14 3 17 #"three-species-ToL"
0 0 24 3 2 #") "
0 0 14 3 17 #"human-species-ToL"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-species"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"troll\""
0 0 24 3 1 #" "
0 0 14 3 17 #"three-species-ToL"
0 0 24 3 2 #") "
0 0 14 3 17 #"troll-species-ToL"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";; is-extinct? : string tree-of-life -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #";; Determines whether the given species is recorded as exctinct in t"
 #"he given tree."
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #";; Precondition: the species with the given name appears exactly onc"
 #"e in the tree."
) 0 0 24 29 1 #"\n"
0 0 17 3 26 #";; Hint: use find-species!"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"is-extinct?"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 53 #";; plai data-types provide helpers and accessors like"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 52 #";; empty-tree? and species-name or species-extinct?,"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 54 #";; although you can use type-case instead if you want."
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 55 #";; Here, we know the species exists (it's a given); so,"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 57 #";; we know our find-species function can return a species"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 54 #";; to us (NOT a empty-tree). You can take advantage of"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 55 #";; that to make the code shorter/clearer if you'd like."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"species-extinct?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-species"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 11 #"is-extinct?"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"troll\""
0 0 24 3 1 #" "
0 0 14 3 17 #"three-species-ToL"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 11 #"is-extinct?"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"human\""
0 0 24 3 1 #" "
0 0 14 3 17 #"three-species-ToL"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";; common-ancestor : string string tree-of-life -> (or false tree-of"
 #"-life)"
) 0 0 24 29 1 #"\n"
0 0 17 3 110
(
 #";; Returns the node of the closest common ancestor OR false if one o"
 #"r both species does not exist in the tree."
) 0 0 24 29 1 #"\n"
0 0 17 3 33 #";; DOES NOT NEED TO BE EFFICIENT."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #";; Precondition: each named species appears AT MOST once (i.e., zero"
 #" or one time)."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"common-ancestor"
0 0 24 3 1 #" "
0 0 14 3 5 #"name1"
0 0 24 3 1 #" "
0 0 14 3 5 #"name2"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"both-names-in-child"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"false?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-species"
0 0 24 3 1 #" "
0 0 14 3 5 #"name1"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"false?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-species"
0 0 24 3 1 #" "
0 0 14 3 5 #"name2"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"names-in-"
0 0 14 3 1 #"s"
0 0 14 3 13 #"eperate-trees"
0 0 24 3 1 #" "
0 0 14 3 5 #"tree1"
0 0 24 3 1 #" "
0 0 14 3 5 #"tree2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"false?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-species"
0 0 24 3 1 #" "
0 0 14 3 5 #"name1"
0 0 24 3 1 #" "
0 0 14 3 5 #"tree1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 6 #"false?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-species"
0 0 24 3 1 #" "
0 0 14 3 5 #"name2"
0 0 24 3 1 #" "
0 0 14 3 5 #"tree1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"false?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-species"
0 0 24 3 1 #" "
0 0 14 3 5 #"name2"
0 0 24 3 1 #" "
0 0 14 3 5 #"tree2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 6 #"false?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-species"
0 0 24 3 1 #" "
0 0 14 3 5 #"name1"
0 0 24 3 1 #" "
0 0 14 3 5 #"tree2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"false?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-species"
0 0 24 3 1 #" "
0 0 14 3 5 #"name2"
0 0 24 3 1 #" "
0 0 14 3 5 #"tree1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 6 #"false?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-species"
0 0 24 3 1 #" "
0 0 14 3 5 #"name1"
0 0 24 3 1 #" "
0 0 14 3 5 #"tree1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"false?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-species"
0 0 24 3 1 #" "
0 0 14 3 5 #"name1"
0 0 24 3 1 #" "
0 0 14 3 5 #"tree2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 6 #"false?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-species"
0 0 24 3 1 #" "
0 0 14 3 5 #"name2"
0 0 24 3 1 #" "
0 0 14 3 5 #"tree2"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"name-in-either-tree"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 5 #"tree1"
0 0 24 3 1 #" "
0 0 14 3 5 #"tree2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"false?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-species"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 5 #"tree1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"false?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-species"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 5 #"tree2"
0 0 24 3 6 #")))))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 12 #"tree-of-life"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 10 #"empty-tree"
0 0 24 3 4 #" () "
0 0 14 3 5 #"false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 7 #"species"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 2 #"c1"
0 0 24 3 1 #" "
0 0 14 3 2 #"c2"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 23 #"names-in-seperate-trees"
0 0 24 3 1 #" "
0 0 14 3 2 #"c1"
0 0 24 3 1 #" "
0 0 14 3 2 #"c2"
0 0 24 3 2 #") "
0 0 17 3 44 #";TODO: turn these into conds for readability"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                               "
0 0 14 3 4 #"tree"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 19 #"both-names-in-child"
0 0 24 3 1 #" "
0 0 14 3 2 #"c1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 15 #"common-ancestor"
0 0 24 3 1 #" "
0 0 14 3 5 #"name1"
0 0 24 3 1 #" "
0 0 14 3 5 #"name2"
0 0 24 3 1 #" "
0 0 14 3 2 #"c1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 19 #"both-names-in-child"
0 0 24 3 1 #" "
0 0 14 3 2 #"c2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 15 #"common-ancestor"
0 0 24 3 1 #" "
0 0 14 3 5 #"name1"
0 0 24 3 1 #" "
0 0 14 3 5 #"name2"
0 0 24 3 1 #" "
0 0 14 3 2 #"c2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 5 #"name1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 19 #"name-in-either-tree"
0 0 24 3 1 #" "
0 0 14 3 5 #"name2"
0 0 24 3 1 #" "
0 0 14 3 2 #"c1"
0 0 24 3 1 #" "
0 0 14 3 2 #"c2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                               "
0 0 14 3 4 #"tree"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                               ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 5 #"name2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 51 #"                                                   "
0 0 14 3 4 #"tree"
0 0 24 29 1 #"\n"
0 0 24 3 51 #"                                                   "
0 0 14 3 5 #"false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 5 #"name2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                               ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 19 #"name-in-either-tree"
0 0 24 3 1 #" "
0 0 14 3 5 #"name1"
0 0 24 3 1 #" "
0 0 14 3 2 #"c1"
0 0 24 3 1 #" "
0 0 14 3 2 #"c2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 51 #"                                                   "
0 0 14 3 4 #"tree"
0 0 24 29 1 #"\n"
0 0 24 3 51 #"                                                   "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                               "
0 0 14 3 5 #"false"
0 0 24 3 9 #")))))])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; Neither appears"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 15 #"common-ancestor"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"elsa\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"anna\""
0 0 24 3 2 #" ("
0 0 14 3 10 #"empty-tree"
0 0 24 3 3 #")) "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 15 #"common-ancestor"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"elsa\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"anna\""
0 0 24 3 1 #" "
0 0 14 3 17 #"human-species-ToL"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 15 #"common-ancestor"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"elsa\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"anna\""
0 0 24 3 1 #" "
0 0 14 3 17 #"three-species-ToL"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; Only one appears (both orders)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 15 #"common-ancestor"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"elsa\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"human\""
0 0 24 3 1 #" "
0 0 14 3 17 #"human-species-ToL"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 15 #"common-ancestor"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"human\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"elsa\""
0 0 24 3 1 #" "
0 0 14 3 17 #"human-species-ToL"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 15 #"common-ancestor"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"elsa\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"human\""
0 0 24 3 1 #" "
0 0 14 3 17 #"three-species-ToL"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 15 #"common-ancestor"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"human\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"elsa\""
0 0 24 3 1 #" "
0 0 14 3 17 #"three-species-ToL"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; One is THIS node, other in subtree."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 15 #"common-ancestor"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"missing-link\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"human\""
0 0 24 3 1 #" "
0 0 14 3 17 #"three-species-ToL"
0 0 24 3 2 #") "
0 0 14 3 17 #"three-species-ToL"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 15 #"common-ancestor"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"human\""
0 0 24 3 1 #" "
0 0 19 3 14 #"\"missing-link\""
0 0 24 3 1 #" "
0 0 14 3 17 #"three-species-ToL"
0 0 24 3 2 #") "
0 0 14 3 17 #"three-species-ToL"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 15 #"common-ancestor"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"missing-link\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"troll\""
0 0 24 3 1 #" "
0 0 14 3 17 #"three-species-ToL"
0 0 24 3 2 #") "
0 0 14 3 17 #"three-species-ToL"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 15 #"common-ancestor"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"troll\""
0 0 24 3 1 #" "
0 0 19 3 14 #"\"missing-link\""
0 0 24 3 1 #" "
0 0 14 3 17 #"three-species-ToL"
0 0 24 3 2 #") "
0 0 14 3 17 #"three-species-ToL"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; Both appear in different subtrees."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 15 #"common-ancestor"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"troll\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"human\""
0 0 24 3 1 #" "
0 0 14 3 17 #"three-species-ToL"
0 0 24 3 2 #") "
0 0 14 3 17 #"three-species-ToL"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 15 #"common-ancestor"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"human\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"troll\""
0 0 24 3 1 #" "
0 0 14 3 17 #"three-species-ToL"
0 0 24 3 2 #") "
0 0 14 3 17 #"three-species-ToL"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; Both appear in the same subtree."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 25 #"subtree-appearances-right"
0 0 24 3 2 #" ("
0 0 14 3 7 #"species"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"goo\""
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 7 #"species"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"foo\""
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #" ("
0 0 14 3 10 #"empty-tree"
0 0 24 3 3 #") ("
0 0 14 3 10 #"empty-tree"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                           "
0 0 14 3 17 #"three-species-ToL"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 24 #"subtree-appearances-left"
0 0 24 3 2 #" ("
0 0 14 3 7 #"species"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"goo\""
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                          "
0 0 14 3 17 #"three-species-ToL"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 7 #"species"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"foo\""
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #" ("
0 0 14 3 10 #"empty-tree"
0 0 24 3 3 #") ("
0 0 14 3 10 #"empty-tree"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 15 #"common-ancestor"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"troll\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"human\""
0 0 24 3 1 #" "
0 0 14 3 25 #"subtree-appearances-right"
0 0 24 3 2 #") "
0 0 14 3 17 #"three-species-ToL"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 15 #"common-ancestor"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"human\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"troll\""
0 0 24 3 1 #" "
0 0 14 3 25 #"subtree-appearances-right"
0 0 24 3 2 #") "
0 0 14 3 17 #"three-species-ToL"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 15 #"common-ancestor"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"troll\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"human\""
0 0 24 3 1 #" "
0 0 14 3 24 #"subtree-appearances-left"
0 0 24 3 2 #") "
0 0 14 3 17 #"three-species-ToL"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 15 #"common-ancestor"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"human\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"troll\""
0 0 24 3 1 #" "
0 0 14 3 24 #"subtree-appearances-left"
0 0 24 3 2 #") "
0 0 14 3 17 #"three-species-ToL"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 15 #"common-ancestor"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"missing-link\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"human\""
0 0 24 3 1 #" "
0 0 14 3 25 #"subtree-appearances-right"
0 0 24 3 2 #") "
0 0 14 3 17 #"three-species-ToL"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 15 #"common-ancestor"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"human\""
0 0 24 3 1 #" "
0 0 19 3 14 #"\"missing-link\""
0 0 24 3 1 #" "
0 0 14 3 25 #"subtree-appearances-right"
0 0 24 3 2 #") "
0 0 14 3 17 #"three-species-ToL"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 15 #"common-ancestor"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"missing-link\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"human\""
0 0 24 3 1 #" "
0 0 14 3 24 #"subtree-appearances-left"
0 0 24 3 2 #") "
0 0 14 3 17 #"three-species-ToL"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 15 #"common-ancestor"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"human\""
0 0 24 3 1 #" "
0 0 19 3 14 #"\"missing-link\""
0 0 24 3 1 #" "
0 0 14 3 24 #"subtree-appearances-left"
0 0 24 3 2 #") "
0 0 14 3 17 #"three-species-ToL"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; Both are ONE node."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 15 #"common-ancestor"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"troll\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"troll\""
0 0 24 3 1 #" "
0 0 14 3 17 #"troll-species-ToL"
0 0 24 3 2 #") "
0 0 14 3 17 #"troll-species-ToL"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 15 #"common-ancestor"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"troll\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"troll\""
0 0 24 3 1 #" "
0 0 14 3 24 #"subtree-appearances-left"
0 0 24 3 2 #") "
0 0 14 3 17 #"troll-species-ToL"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";;;; PROBLEM #7 ;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; Here's a small EBNF specification for a language.  Finish the"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; abstract syntax (a define-type named OE for \"order expression\")"
 #" for"
) 0 0 24 29 1 #"\n"
0 0 17 3 16 #";; the language."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; <expr> ::= (group <expr> <expr>)"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";;          | (sequentially <expr> <expr>)"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";;          | (together <expr> <expr>)"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";;          | (join <expr> <expr>)"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";;          | (arrive <expr>)"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";;          | (give <expr> name <id> in <expr>)"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";;          | <string>"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;          | <id>"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";; Notes: Use \"name\" as the name of the (give <expr> name <id> in"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";; <expr>) variant.  Assume that a <string> is just a Racket string,"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; and an <id> is just a Racket symbol.  We suggest you call the"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; <string> variant string-literal and the <id> variant id-ref."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; Before you ask: yes, the 6th, 7th, and 8th cases are a bit"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";; different from the others. Note that an abstract syntax ABSTRACTS"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";; from the concrete syntax. To give you a hint to what this means:"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";; 1) Solve the second case. (Go do that now. Don't look at the next"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";;    step yet. Spoilers!)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";; 2) Did you look? Well, that was a mistake. Go finish step 1 and"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";;    then go on to step 3. Otherwise, pat yourself on the back and"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;    then go on to step 3."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";; 3) Note that your solution to that second case would be JUST AS"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;    GOOD abstract syntax if the concrete syntax were"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";;    (sequentially <expr> then <expr>) instead of"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;    (sequentially <expr> <expr>)."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 2 #"OE"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"group"
0 0 24 3 2 #" ("
0 0 14 3 5 #"expr1"
0 0 24 3 1 #" "
0 0 14 3 3 #"OE?"
0 0 24 3 3 #") ("
0 0 14 3 5 #"expr2"
0 0 24 3 1 #" "
0 0 14 3 3 #"OE?"
0 0 24 3 3 #")] "
0 0 17 3 3 #"; 1"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 12 #"sequentially"
0 0 24 3 2 #" ("
0 0 14 3 5 #"expr1"
0 0 24 3 1 #" "
0 0 14 3 3 #"OE?"
0 0 24 3 3 #") ("
0 0 14 3 5 #"expr2"
0 0 24 3 1 #" "
0 0 14 3 3 #"OE?"
0 0 24 3 3 #")] "
0 0 17 3 3 #"; 2"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 8 #"together"
0 0 24 3 1 #"("
0 0 14 3 5 #"expr1"
0 0 24 3 1 #" "
0 0 14 3 3 #"OE?"
0 0 24 3 3 #") ("
0 0 14 3 5 #"expr2"
0 0 24 3 1 #" "
0 0 14 3 3 #"OE?"
0 0 24 3 3 #")] "
0 0 17 3 3 #"; 3"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"join"
0 0 24 3 2 #" ("
0 0 14 3 5 #"expr1"
0 0 24 3 1 #" "
0 0 14 3 3 #"OE?"
0 0 24 3 3 #") ("
0 0 14 3 5 #"expr2"
0 0 24 3 1 #" "
0 0 14 3 3 #"OE?"
0 0 24 3 3 #")] "
0 0 17 3 3 #"; 4"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 6 #"arrive"
0 0 24 3 2 #" ("
0 0 14 3 5 #"expr1"
0 0 24 3 1 #" "
0 0 14 3 3 #"OE?"
0 0 24 3 3 #")] "
0 0 17 3 3 #"; 5"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"name"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 3 #"OE?"
0 0 24 3 3 #") ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 7 #"string?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"give"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 7 #"string?"
0 0 24 3 3 #") ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 3 #")] "
0 0 17 3 3 #"; 6"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 14 #"string-literal"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string-literal"
0 0 24 3 1 #" "
0 0 14 3 7 #"string?"
0 0 24 3 3 #")] "
0 0 17 3 3 #"; 7"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 6 #"id-ref"
0 0 24 3 2 #" ("
0 0 14 3 6 #"id-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 4 #")]) "
0 0 17 3 4 #"; 8 "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";;;; PROBLEM #8 ;;;;"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; Let's get a bit more practice with EBNF. Read about regexp at"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";; https://docs.racket-lang.org/reference/regexp.html#%28part._regex"
 #"p-syntax%29"
) 0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #";; (Note that we'll use the regexp syntax, not the pregexp syntax in"
 #" this problem."
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";; For practical applications, however, you may want to use pregexp!"
 #")"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 105
(
 #";; Now, for each of the following subproblems, you'll \"explain\" wh"
 #"ether it is a legal regular expression."
) 0 0 24 29 1 #"\n"
0 0 17 3 101
(
 #";; Specifically, create a variable named reparseN (for appropriate N"
 #", e.g., reparse1, reparse2, etc.)"
) 0 0 24 29 1 #"\n"
0 0 17 3 111
(
 #";; that contains a comma-separated list of the non-terminals used to"
 #" match that regexp (in \"depth-first\" order;"
) 0 0 24 29 1 #"\n"
0 0 17 3 120
(
 #";; so, going all the way down until there are no non-terminals on th"
 #"e very first piece of the regexp and then continuing"
) 0 0 24 29 1 #"\n"
0 0 17 3 134
(
 #";; in the same way with the next piece) UNLESS it isn't a legal rege"
 #"xp, in which case just make the variable contain the empty string."
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 120
(
 #";; For example, \"[abc\" is not a legal regexp. So, if that were sub"
 #"problem 42, then you should say (define reparse42 \"\")."
) 0 0 24 29 1 #"\n"
0 0 17 3 105
(
 #";; On the other hand, \"[^a-db]\" IS a legal regexp. So, if that wer"
 #"e subproblem 1729, then you should say:"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 115
(
 #";;   (define reparse1729 \"regexp,pces,pce,atom,rng,mrng,lirng,lirng"
 #",riliteral,riliteral,lrng,lirng,riliteral,pces\")"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 110
(
 #";; That represents finding that \"[^a-db]\" is a legal regular expre"
 #"ssion by working through the rules this way:"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";;        <regexp> ::= <pces>"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";;                       |"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";;                       |"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";;               <pces> ::= <pce><pces>"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";;                          /        \\"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";;                         /          \\"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";;                        /    <pces> ::=     ;; That is, just a bla"
 #"nk."
) 0 0 24 29 1 #"\n"
0 0 17 3 26 #";;                       /"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;                      /"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";;              <pce> ::= <atom>"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;                           |"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;                           |"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";;                   <atom> ::= [^<rng>]"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";;                                  |"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";;                                  |"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";;                           <rng> ::= <mrng>"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";;                                       |"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";;                                       |"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;                               <mrng> ::= <lirng>"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";;                                             |"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";;                                             |"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";;                                    <lirng> ::= <lirng><lrng>"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";;                                                  /        \\"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";;                                                 /          \\"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";;                                                /    <lrng> ::= <l"
 #"irng>"
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";;                                               /                  "
 #"  \\"
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";;                                              /                   "
 #"   \\"
) 0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #";;                                             /               <lirn"
 #"g> ::= <riliteral>"
) 0 0 24 29 1 #"\n"
0 0 17 3 94
(
 #";;                                            /               (<rili"
 #"teral> becomes a terminal)"
) 0 0 24 29 1 #"\n"
0 0 17 3 63
#";;                                           /                 "
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;                                 <lirng> ::= <riliteral>-<rilitera"
 #"l>"
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;                                (both <riliteral>s become terminal"
 #"s)"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #";; You can see the \"depth-first\" order through this tree by starti"
 #"ng at the top and"
) 0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";; then running your finger all the way around the figure starting o"
 #"n the left side."
) 0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";; You'll first encounter <regexp>, then <pces>, then <pce>, then <a"
 #"tom>, and so on."
) 0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";; Once you make it around the bottom (at <riliteral>-<riliteral>), "
 #"you'll wrap around,"
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";; up to the bottom of <lirng><lrng>, and then encounter <lrng>, <li"
 #"rng>, and"
) 0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #";; <riliteral>, before working your way up the right side, picking u"
 #"p one last <pces>."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #"; create a variable that contains a comma-separated list of the non-"
 #"terminals used to match that regexp (in \"depth-first\" order"
) 0 0 24 29 1 #"\n"
0 0 17 3 24 #"; Subproblem 1: \"(ab)|c\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"reparse1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"TODO"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #"; Here's how we'll test. DON'T LOOK AT THIS YET! Solve this one on y"
 #"our own and"
) 0 0 24 29 1 #"\n"
0 0 17 3 67
#"; then work through whether and where you don't match our solution."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 4 #"test"
0 0 17 3 1 #" "
0 0 17 3 8 #"reparse1"
0 0 17 3 1 #" "
0 0 17 3 125
(
 #"\"regexp,regexp,pces,pce,atom,regexp,pces,pce,atom,literal,pces,pce,"
 #"atom,literal,pces,pces,regexp,pces,pce,atom,literal,pces\")"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; Subproblem 2: \"(ab)|\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"reparse2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"TODO"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; Subproblem 3: \"+*\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"reparse3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"TODO"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; Subproblem 4: \"[]a]\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"reparse4"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"TODO"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; Subproblem 5: \".??\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"reparse5"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"TODO"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 94
(
 #";; Non-required extra question: Do any of the rules in the regexp sy"
 #"ntax--BESIDES the ones for"
) 0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";; <literal>, <aliteral>, <riliteral>. and <rliteral>--break the rul"
 #"es of EBNF?"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 96
(
 #";; Aside: those four literal rules could be rewritten so they don't "
 #"break any rules, but listing"
) 0 0 24 29 1 #"\n"
0 0 17 3 66
#";; out all the legal unicode characters would take a lot of space!"
0           0
