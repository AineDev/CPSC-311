#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.4 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"SimSun-ExtB\0"
0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 8491 0 28 3 10 #"#lang plai"
0 0 24 29 1 #"\n"
0 0 17 3 94
(
 #";; NOTE: While we provide you with some tests (all the tests that wi"
 #"ll be marked, for example)"
) 0 0 24 29 1 #"\n"
0 0 17 3 96
(
 #";;       we as usual STRONGLY RECOMMEND YOU to write your own tests "
 #"as well.  That way you might"
) 0 0 24 29 1 #"\n"
0 0 17 3 104
(
 #";;       be better able to separate the impact of each of the TODOs,"
 #" as many tests will require multiple"
) 0 0 24 29 1 #"\n"
0 0 17 3 49 #";;       TODOs to be fixed for the tests to pass."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 17 #"print-only-errors"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 14 #"racket/sandbox"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 39 #";Also, re-import some macros from plai:"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 7 #"only-in"
0 0 24 3 1 #" "
0 0 14 3 4 #"plai"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 17 3 41 #";Rename plai's testX macros as plai-testX"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 14 3 9 #"plai-test"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 9 #"test/pred"
0 0 24 3 1 #" "
0 0 14 3 14 #"plai-test/pred"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 8 #"test/exn"
0 0 24 3 1 #" "
0 0 14 3 13 #"plai-test/exn"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #"; These macros are the same as in assignment 4 (though with shorter "
 #"timeouts)"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 18 #"define-syntax-rule"
0 0 24 3 2 #" ("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 14 3 6 #"actual"
0 0 24 3 1 #" "
0 0 14 3 8 #"expected"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"plai-test"
0 0 24 3 2 #" ("
0 0 15 3 11 #"with-limits"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 3 #"128"
0 0 24 3 1 #" "
0 0 14 3 6 #"actual"
0 0 24 3 2 #") "
0 0 14 3 8 #"expected"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 18 #"define-syntax-rule"
0 0 24 3 2 #" ("
0 0 14 3 8 #"test/exn"
0 0 24 3 1 #" "
0 0 14 3 6 #"actual"
0 0 24 3 1 #" "
0 0 14 3 3 #"msg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"plai-test/exn"
0 0 24 3 2 #" ("
0 0 15 3 11 #"with-limits"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 3 #"128"
0 0 24 3 1 #" "
0 0 14 3 6 #"actual"
0 0 24 3 2 #") "
0 0 14 3 3 #"msg"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 18 #"define-syntax-rule"
0 0 24 3 2 #" ("
0 0 14 3 9 #"test/pred"
0 0 24 3 1 #" "
0 0 14 3 6 #"actual"
0 0 24 3 1 #" "
0 0 14 3 4 #"pred"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"plai-test/pred"
0 0 24 3 2 #" ("
0 0 15 3 11 #"with-limits"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 3 #"128"
0 0 24 3 1 #" "
0 0 14 3 6 #"actual"
0 0 24 3 2 #") "
0 0 14 3 4 #"pred"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; Syntax specification:"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";; <PLE> ::= <num>"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;          | <id>"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";;          | {+ <PLE> <PLE>}"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";;          | {- <PLE> <PLE>}"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";;          | {* <PLE> <PLE>}"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";;          | {with {<id> <PLE>} <PLE>}"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";;          | {fun {<id>} <PLE>}"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;          | {<PLE> <PLE>}"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";;          | {if0 <PLE> <PLE> <PLE>}"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;          | {empty}"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";;          | {cons <PLE> <PLE>}"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;          | {first <PLE>}"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";;          | {rest <PLE>}"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;          | {box <PLE>}"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;          | {setbox! <PLE> <PLE>}"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;          | {unbox <PLE>}"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";;          | {seqn <PLE> <PLE>}"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";;          | {promise <PLE>}"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;          | {yield}"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";;          | {after <PLE> <PLE>}"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;          | {all <PLE> <PLE>}"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";;          | {race <PLE> <PLE>}"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;          | {resolved <PLE>}"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";;          | {print-out <string>}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";; We're going to make desugaring an explicit step.  So, here's the"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; \"surface\" language that our end-user programmers program in:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 3 #"PLE"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"s-num"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 7 #"number?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"s-id"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"s-add"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 4 #"PLE?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 14 3 4 #"PLE?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"s-sub"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 4 #"PLE?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 14 3 4 #"PLE?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 6 #"s-mult"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 4 #"PLE?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 14 3 4 #"PLE?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 6 #"s-with"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 3 #") ("
0 0 14 3 9 #"named-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"PLE?"
0 0 24 3 3 #") ("
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 4 #"PLE?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"s-fun"
0 0 24 3 2 #" ("
0 0 14 3 8 #"arg-name"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 3 #") ("
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 4 #"PLE?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"s-app"
0 0 24 3 2 #" ("
0 0 14 3 7 #"fun-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"PLE?"
0 0 24 3 3 #") ("
0 0 14 3 7 #"arg-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"PLE?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"s-if0"
0 0 24 3 2 #" ("
0 0 14 3 8 #"test-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"PLE?"
0 0 24 3 3 #") ("
0 0 14 3 8 #"then-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"PLE?"
0 0 24 3 3 #") ("
0 0 14 3 8 #"else-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"PLE?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"s-box"
0 0 24 3 2 #" ("
0 0 14 3 7 #"val-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"PLE?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 9 #"s-setbox!"
0 0 24 3 2 #" ("
0 0 14 3 7 #"box-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"PLE?"
0 0 24 3 3 #") ("
0 0 14 3 7 #"val-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"PLE?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 8 #"s-un-box"
0 0 24 3 2 #" ("
0 0 14 3 7 #"box-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"PLE?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 6 #"s-seqn"
0 0 24 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 4 #"PLE?"
0 0 24 3 3 #") ("
0 0 14 3 4 #"exp2"
0 0 24 3 1 #" "
0 0 14 3 4 #"PLE?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 11 #"s-cons-cell"
0 0 24 3 2 #" ("
0 0 14 3 2 #"hd"
0 0 24 3 1 #" "
0 0 14 3 4 #"PLE?"
0 0 24 3 3 #") ("
0 0 14 3 2 #"tl"
0 0 24 3 1 #" "
0 0 14 3 4 #"PLE?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 12 #"s-empty-cell"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 9 #"s-promise"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 4 #"PLE?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 7 #"s-yield"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 7 #"s-after"
0 0 24 3 2 #" ("
0 0 14 3 7 #"promise"
0 0 24 3 1 #" "
0 0 14 3 4 #"PLE?"
0 0 24 3 3 #") ("
0 0 14 3 4 #"then"
0 0 24 3 1 #" "
0 0 14 3 4 #"PLE?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"s-all"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"PLE?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"snd"
0 0 24 3 1 #" "
0 0 14 3 4 #"PLE?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 6 #"s-race"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"PLE?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"snd"
0 0 24 3 1 #" "
0 0 14 3 4 #"PLE?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 11 #"s-print-out"
0 0 24 3 2 #" ("
0 0 14 3 6 #"string"
0 0 24 3 1 #" "
0 0 14 3 7 #"string?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 10 #"s-resolved"
0 0 24 3 2 #" ("
0 0 14 3 7 #"promise"
0 0 24 3 1 #" "
0 0 14 3 4 #"PLE?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";; Here's the language our interpreter will understand.  Note that i"
 #"t"
) 0 0 24 29 1 #"\n"
0 0 17 3 61
(
 #";; lacks \"with\" AND \"set!\".  \"D-PLE\" is for \"desugared CFAE\""
 #":"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 5 #"D-PLE"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"num"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 7 #"number?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 2 #"id"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"add"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 6 #"D-PLE?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 14 3 6 #"D-PLE?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"mult"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 6 #"D-PLE?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"rhs"
0 0 24 3 1 #" "
0 0 14 3 6 #"D-PLE?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"fun"
0 0 24 3 2 #" ("
0 0 14 3 8 #"arg-name"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 3 #") ("
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 6 #"D-PLE?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"app"
0 0 24 3 2 #" ("
0 0 14 3 7 #"fun-exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"D-PLE?"
0 0 24 3 3 #") ("
0 0 14 3 7 #"arg-exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"D-PLE?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"if0"
0 0 24 3 2 #" ("
0 0 14 3 8 #"test-exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"D-PLE?"
0 0 24 3 3 #") ("
0 0 14 3 8 #"then-exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"D-PLE?"
0 0 24 3 3 #") ("
0 0 14 3 8 #"else-exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"D-PLE?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 8 #"make-box"
0 0 24 3 2 #" ("
0 0 14 3 7 #"val-exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"D-PLE?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 7 #"setbox!"
0 0 24 3 2 #" ("
0 0 14 3 7 #"box-exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"D-PLE?"
0 0 24 3 3 #") ("
0 0 14 3 7 #"val-exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"D-PLE?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 6 #"un-box"
0 0 24 3 2 #" ("
0 0 14 3 7 #"box-exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"D-PLE?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 9 #"cons-cell"
0 0 24 3 2 #" ("
0 0 14 3 2 #"hd"
0 0 24 3 1 #" "
0 0 14 3 6 #"D-PLE?"
0 0 24 3 2 #")("
0 0 14 3 2 #"tl"
0 0 24 3 1 #" "
0 0 14 3 6 #"D-PLE?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 10 #"empty-cell"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 7 #"promise"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 6 #"D-PLE?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"yield"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"after"
0 0 24 3 2 #" ("
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 6 #"D-PLE?"
0 0 24 3 3 #") ("
0 0 14 3 4 #"then"
0 0 24 3 1 #" "
0 0 14 3 6 #"D-PLE?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"all"
0 0 24 3 2 #" ("
0 0 14 3 3 #"fst"
0 0 24 3 1 #" "
0 0 14 3 6 #"D-PLE?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"snd"
0 0 24 3 1 #" "
0 0 14 3 6 #"D-PLE?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"race"
0 0 24 3 2 #" ("
0 0 14 3 3 #"fst"
0 0 24 3 1 #" "
0 0 14 3 6 #"D-PLE?"
0 0 24 3 3 #") ("
0 0 14 3 3 #"snd"
0 0 24 3 1 #" "
0 0 14 3 6 #"D-PLE?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 9 #"print-out"
0 0 24 3 2 #" ("
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 14 3 7 #"string?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 8 #"resolved"
0 0 24 3 2 #" ("
0 0 14 3 7 #"promise"
0 0 24 3 1 #" "
0 0 14 3 6 #"D-PLE?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"*reserved-symbols*"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 4 #"with"
0 0 24 3 1 #" "
0 0 14 3 3 #"fun"
0 0 24 3 1 #" "
0 0 14 3 3 #"if0"
0 0 24 3 1 #" "
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 14 3 7 #"setbox!"
0 0 24 3 1 #" "
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 4 #"seqn"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                               "
0 0 14 3 7 #"promise"
0 0 24 3 1 #" "
0 0 14 3 3 #"all"
0 0 24 3 1 #" "
0 0 14 3 4 #"race"
0 0 24 3 1 #" "
0 0 14 3 5 #"after"
0 0 24 3 1 #" "
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 14 3 5 #"yield"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                               "
0 0 14 3 10 #"empty-cell"
0 0 24 3 1 #" "
0 0 14 3 9 #"cons-cell"
0 0 24 3 1 #" "
0 0 14 3 8 #"resolved"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; valid-identifier? : any -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";; Determines whether the parameter is valid as an identifier name, "
 #"i.e.,"
) 0 0 24 29 1 #"\n"
0 0 17 3 33 #";; a symbol that is not reserved."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"valid-identifier?"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 18 #"*reserved-symbols*"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; Some reserved symbols."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 17 #"valid-identifier?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 17 #"valid-identifier?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 17 #"valid-identifier?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"with"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 17 #"valid-identifier?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"setbox!"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; Not a symbol"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 17 #"valid-identifier?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"}) "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 17 #"valid-identifier?"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 17 #"valid-identifier?"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"id\""
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";; OK"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 17 #"valid-identifier?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"id"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 17 #"valid-identifier?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"app"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 17 #"valid-identifier?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; PARSING ;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; parse : any -> PLE"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";; Consumes an s-expression (in our concrete \"surface\" syntax) and"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; generates the corresponding PLE AST."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 14 3 17 #"valid-identifier?"
0 0 24 3 3 #") ("
0 0 14 3 4 #"s-id"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 14 3 7 #"number?"
0 0 24 3 3 #") ("
0 0 14 3 5 #"s-num"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"lexp"
0 0 24 3 1 #" "
0 0 14 3 4 #"rexp"
0 0 24 3 3 #") ("
0 0 14 3 5 #"s-add"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 4 #"lexp"
0 0 24 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 4 #"rexp"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 4 #"lexp"
0 0 24 3 1 #" "
0 0 14 3 4 #"rexp"
0 0 24 3 3 #") ("
0 0 14 3 5 #"s-sub"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 4 #"lexp"
0 0 24 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 4 #"rexp"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 4 #"lexp"
0 0 24 3 1 #" "
0 0 14 3 4 #"rexp"
0 0 24 3 3 #") ("
0 0 14 3 6 #"s-mult"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 4 #"lexp"
0 0 24 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 4 #"rexp"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"with"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 14 3 17 #"valid-identifier?"
0 0 24 3 2 #") "
0 0 14 3 2 #"id"
0 0 24 3 2 #") "
0 0 14 3 12 #"binding-expr"
0 0 24 3 2 #") "
0 0 14 3 9 #"body-expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"s-with"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 12 #"binding-expr"
0 0 24 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 9 #"body-expr"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 14 3 17 #"valid-identifier?"
0 0 24 3 2 #") "
0 0 14 3 2 #"id"
0 0 24 3 3 #")) "
0 0 14 3 9 #"body-expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 5 #"s-fun"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 9 #"body-expr"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"if0"
0 0 24 3 1 #" "
0 0 14 3 6 #"c-expr"
0 0 24 3 1 #" "
0 0 14 3 6 #"t-expr"
0 0 24 3 1 #" "
0 0 14 3 6 #"e-expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 5 #"s-if0"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 6 #"c-expr"
0 0 24 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 6 #"t-expr"
0 0 24 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 6 #"e-expr"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 61
#";; Don't parse (<reserved> <expr>) as a function application."
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 6 #"f-expr"
0 0 24 3 2 #" ("
0 0 14 3 1 #"?"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 18 #"*reserved-symbols*"
0 0 24 3 6 #"))))) "
0 0 14 3 6 #"a-expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 5 #"s-app"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 6 #"f-expr"
0 0 24 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 6 #"a-expr"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 14 3 6 #"v-expr"
0 0 24 3 3 #") ("
0 0 14 3 5 #"s-box"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 6 #"v-expr"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 6 #"b-expr"
0 0 24 3 3 #") ("
0 0 14 3 8 #"s-un-box"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 6 #"b-expr"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"setbox!"
0 0 24 3 1 #" "
0 0 14 3 6 #"b-expr"
0 0 24 3 1 #" "
0 0 14 3 6 #"v-expr"
0 0 24 3 3 #") ("
0 0 14 3 9 #"s-setbox!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 6 #"b-expr"
0 0 24 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 6 #"v-expr"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"seqn"
0 0 24 3 1 #" "
0 0 14 3 5 #"expr1"
0 0 24 3 1 #" "
0 0 14 3 5 #"expr2"
0 0 24 3 3 #") ("
0 0 14 3 6 #"s-seqn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 5 #"expr1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 5 #"expr2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"cons-cell"
0 0 24 3 1 #" "
0 0 14 3 2 #"hd"
0 0 24 3 1 #" "
0 0 14 3 2 #"tl"
0 0 24 3 3 #") ("
0 0 14 3 11 #"s-cons-cell"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 2 #"hd"
0 0 24 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 2 #"tl"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"'"
0 0 14 3 10 #"empty-cell"
0 0 24 3 2 #" ("
0 0 14 3 12 #"s-empty-cell"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"yield"
0 0 24 3 3 #") ("
0 0 14 3 7 #"s-yield"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"promise"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #") ("
0 0 14 3 9 #"s-promise"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"all"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #") ("
0 0 14 3 5 #"s-all"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"after"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #") ("
0 0 14 3 7 #"s-after"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"race"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #") ("
0 0 14 3 6 #"s-race"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 11 #"s-print-out"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"resolved"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 10 #"s-resolved"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 37 #"\"unable to parse the s-expression ~s\""
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 4 #"s-id"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"ys"
0 0 24 3 3 #") ("
0 0 14 3 4 #"s-id"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"ys"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";; Boxes"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #"}) ("
0 0 14 3 5 #"s-box"
0 0 24 3 2 #" ("
0 0 14 3 5 #"s-num"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #"}) ("
0 0 14 3 8 #"s-un-box"
0 0 24 3 2 #" ("
0 0 14 3 5 #"s-num"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 5 #")))  "
0 0 17 3 39 #";; runtime error, but not parsing error"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 7 #"setbox!"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"}) ("
0 0 14 3 9 #"s-setbox!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"s-num"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 5 #"s-num"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #")))  "
0 0 17 3 26 #";; ditto non-parsing error"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";; Seqn"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"seqn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"}) ("
0 0 14 3 6 #"s-seqn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"s-num"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 5 #"s-num"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; Numbers"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 2 #"'3"
0 0 24 3 3 #") ("
0 0 14 3 5 #"s-num"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 2 #"'0"
0 0 24 3 3 #") ("
0 0 14 3 5 #"s-num"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; Plain arithmetic."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"}) ("
0 0 14 3 5 #"s-add"
0 0 24 3 2 #" ("
0 0 14 3 5 #"s-num"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"s-num"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"}) ("
0 0 14 3 5 #"s-sub"
0 0 24 3 2 #" ("
0 0 14 3 5 #"s-num"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"s-num"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #"}) ("
0 0 14 3 5 #"s-add"
0 0 24 3 2 #" ("
0 0 14 3 5 #"s-num"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 5 #"s-num"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #"}) ("
0 0 14 3 5 #"s-sub"
0 0 24 3 2 #" ("
0 0 14 3 5 #"s-num"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 5 #"s-num"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #"}) ("
0 0 14 3 6 #"s-mult"
0 0 24 3 2 #" ("
0 0 14 3 5 #"s-num"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 5 #"s-num"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"+"
0 0 24 3 2 #" {"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #"}} "
0 0 21 3 1 #"4"
0 0 24 3 2 #"})"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"s-add"
0 0 24 3 2 #" ("
0 0 14 3 5 #"s-sub"
0 0 24 3 2 #" ("
0 0 14 3 5 #"s-num"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"s-add"
0 0 24 3 2 #" ("
0 0 14 3 5 #"s-num"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 5 #"s-num"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 5 #"s-num"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; With binding"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"} "
0 0 14 3 1 #"x"
0 0 24 3 4 #"}) ("
0 0 14 3 6 #"s-with"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 5 #"s-num"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"s-id"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 2 #" {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 5 #"}}} {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 4 #"}}})"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"s-with"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 6 #"s-with"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 5 #"s-num"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 5 #"s-add"
0 0 24 3 2 #" ("
0 0 14 3 4 #"s-id"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 4 #"s-id"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 6 #"s-with"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"z"
0 0 24 3 2 #" ("
0 0 14 3 5 #"s-num"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 5 #"s-add"
0 0 24 3 2 #" ("
0 0 14 3 4 #"s-id"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 4 #"s-id"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"z"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Funs/Apps"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 2 #"} "
0 0 14 3 1 #"x"
0 0 24 3 4 #"}) ("
0 0 14 3 5 #"s-fun"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 4 #"s-id"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 3 #"fun"
0 0 24 3 2 #"} "
0 0 14 3 1 #"x"
0 0 24 3 3 #"}) "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"}) ("
0 0 14 3 5 #"s-app"
0 0 24 3 2 #" ("
0 0 14 3 5 #"s-num"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"s-num"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; Error checking"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; non-lists, reserved symbols (e.g., + and -), strings"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 19 3 7 #"\"hello\""
0 0 24 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"with"
0 0 24 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; lists that start with things besides +, -, or with, esp. numbers"
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; that aren't valid apps:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 5 #"hello"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"}) "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 19 3 5 #"\"abc\""
0 0 24 3 3 #"}) "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #"}) "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; + with fewer or more than 2 arguments"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"+"
0 0 24 3 3 #"}) "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #"}) "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #"}) "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; - with fewer or more than 2 arguments"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"-"
0 0 24 3 3 #"}) "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #"}) "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #"}) "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; ill-structured with"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 3 #"}) "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #"}) "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #"}) "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"}}) "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"} "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #"}) "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"} "
0 0 21 3 1 #"3"
0 0 24 3 3 #"}) "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"} "
0 0 21 3 1 #"2"
0 0 24 3 3 #"}) "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; + (and -/with) with non-AEs as arguments"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #"}) "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"b\""
0 0 24 3 3 #"}) "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"+"
0 0 24 3 2 #" {"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\c"
0 0 24 3 2 #"} "
0 0 21 3 1 #"8"
0 0 24 3 3 #"}) "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"foo\""
0 0 24 3 2 #"} "
0 0 14 3 1 #"x"
0 0 24 3 3 #"}) "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"} "
0 0 19 3 5 #"\"foo\""
0 0 24 3 3 #"}) "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 88
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; DESUGARING ;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 3 #"ast"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 3 #"PLE"
0 0 24 3 1 #" "
0 0 14 3 3 #"ast"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 5 #"s-num"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"s-id"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 3 #") ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 5 #"s-add"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 3 #") ("
0 0 14 3 3 #"add"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 5 #"s-sub"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 3 #") ("
0 0 14 3 3 #"add"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 3 #") ("
0 0 14 3 4 #"mult"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 6 #"s-mult"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lhs"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 3 #") ("
0 0 14 3 4 #"mult"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 24 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 28 #";; A substantive desugaring:"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 6 #"s-with"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 9 #"named-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 24 3 2 #" ("
0 0 14 3 5 #"s-app"
0 0 24 3 2 #" ("
0 0 14 3 5 #"s-fun"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                  "
0 0 14 3 9 #"named-exp"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 5 #"s-fun"
0 0 24 3 2 #" ("
0 0 14 3 8 #"arg-name"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 3 #") ("
0 0 14 3 3 #"fun"
0 0 24 3 1 #" "
0 0 14 3 8 #"arg-name"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 5 #"s-app"
0 0 24 3 2 #" ("
0 0 14 3 7 #"fun-exp"
0 0 24 3 1 #" "
0 0 14 3 7 #"arg-exp"
0 0 24 3 3 #") ("
0 0 14 3 3 #"app"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 7 #"fun-exp"
0 0 24 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 7 #"arg-exp"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 5 #"s-if0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 3 #"if0"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 5 #"s-box"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-box"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 8 #"s-un-box"
0 0 24 3 2 #" ("
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 6 #"un-box"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 9 #"s-setbox!"
0 0 24 3 2 #" ("
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 7 #"setbox!"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 6 #"s-seqn"
0 0 24 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 24 3 2 #" ("
0 0 14 3 6 #"s-with"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"seqn"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 11 #"s-cons-cell"
0 0 24 3 2 #" ("
0 0 14 3 2 #"hd"
0 0 24 3 1 #" "
0 0 14 3 2 #"tl"
0 0 24 3 3 #") ("
0 0 14 3 9 #"cons-cell"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 2 #"hd"
0 0 24 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 2 #"tl"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 12 #"s-empty-cell"
0 0 24 3 5 #" () ("
0 0 14 3 10 #"empty-cell"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 9 #"s-promise"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 7 #"promise"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 5 #"s-all"
0 0 24 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #") ("
0 0 14 3 3 #"all"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 7 #"s-after"
0 0 24 3 2 #" ("
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #") ("
0 0 14 3 5 #"after"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 7 #"s-yield"
0 0 24 3 5 #" () ("
0 0 14 3 5 #"yield"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 6 #"s-race"
0 0 24 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #") ("
0 0 14 3 4 #"race"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 11 #"s-print-out"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 10 #"s-resolved"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 8 #"resolved"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"ys"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"ys"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";; Boxes"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 5 #"})) ("
0 0 14 3 8 #"make-box"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 5 #"})) ("
0 0 14 3 6 #"un-box"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 5 #")))  "
0 0 17 3 39 #";; runtime error, but not parsing error"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 7 #"setbox!"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #"})) ("
0 0 14 3 7 #"setbox!"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #")))  "
0 0 17 3 26 #";; ditto non-parsing error"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";; Seqn"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"seqn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #"})) ("
0 0 14 3 7 #"desugar"
0 0 24 3 2 #" ("
0 0 14 3 6 #"s-with"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"s-num"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 5 #"s-num"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; Numbers"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 2 #"'3"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 2 #"'0"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; Plain arithmetic."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 5 #"})) ("
0 0 14 3 3 #"add"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 5 #"})) ("
0 0 14 3 3 #"add"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"mult"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 5 #"})) ("
0 0 14 3 4 #"mult"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; With binding"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"} "
0 0 14 3 1 #"x"
0 0 24 3 5 #"})) ("
0 0 14 3 3 #"app"
0 0 24 3 2 #" ("
0 0 14 3 3 #"fun"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Funs/Apps"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 2 #"} "
0 0 14 3 1 #"x"
0 0 24 3 5 #"})) ("
0 0 14 3 3 #"fun"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 5 #"})) ("
0 0 14 3 3 #"app"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; INTERPRETATION ;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; Values in our internal \"desugared\" abstract syntax:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 11 #"D-PLE-value"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"numV"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 7 #"number?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"boxV"
0 0 24 3 2 #" ("
0 0 14 3 6 #"inside"
0 0 24 3 1 #" "
0 0 14 3 7 #"number?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 40 #"; Note we are using racket's procedures!"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 8 #"closureV"
0 0 24 3 2 #" ("
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 10 #"procedure?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 19 #"; Values for lists:"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"mtV"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"consV"
0 0 24 3 2 #" ("
0 0 14 3 2 #"hd"
0 0 24 3 1 #" "
0 0 14 3 12 #"D-PLE-value?"
0 0 24 3 3 #") ("
0 0 14 3 2 #"tl"
0 0 24 3 1 #" "
0 0 14 3 12 #"D-PLE-value?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 13 #"; voidV value"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"voidV"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 17 #"; PromiseV value:"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 8 #"promiseV"
0 0 24 3 2 #" ("
0 0 14 3 10 #"promise-id"
0 0 24 3 1 #" "
0 0 14 3 7 #"number?"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";; The environment that stores our \"deferred substitutions\":"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 3 #"Env"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"mtEnv"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"anEnv"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 12 #"D-PLE-value?"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"more-subs"
0 0 24 3 1 #" "
0 0 14 3 4 #"Env?"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; lookup : symbol Env -> D-PLE-Value"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; Finds the value of name in env or errors if name is undefined"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" (["
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"lookup-helper"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 3 #"Env"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 5 #"mtEnv"
0 0 24 3 5 #" () ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"free identifier ~a\""
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 5 #"anEnv"
0 0 24 3 2 #" ("
0 0 14 3 10 #"bound-name"
0 0 24 3 1 #" "
0 0 14 3 11 #"bound-value"
0 0 24 3 1 #" "
0 0 14 3 8 #"rest-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 10 #"bound-name"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 14 3 11 #"bound-value"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 13 #"lookup-helper"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 8 #"rest-env"
0 0 24 3 6 #"))])])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"lookup-helper"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";; +/-/* helpers to make interpretation easier (no error-checking ye"
 #"t)"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"num+/k"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 3 #"sto"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 14 3 3 #"thr"
0 0 24 3 1 #" "
0 0 14 3 3 #"pro"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 4 #")  ("
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"numV-n"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 6 #"numV-n"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"sto"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 14 3 3 #"thr"
0 0 24 3 1 #" "
0 0 14 3 3 #"pro"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"num*/k"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 3 #"sto"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 14 3 3 #"thr"
0 0 24 3 1 #" "
0 0 14 3 3 #"pro"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 4 #")  ("
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 6 #"numV-n"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 6 #"numV-n"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"sto"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 14 3 3 #"thr"
0 0 24 3 1 #" "
0 0 14 3 3 #"pro"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"num-/k"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 3 #"sto"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 14 3 3 #"thr"
0 0 24 3 1 #" "
0 0 14 3 3 #"pro"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 4 #")  ("
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"numV-n"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 6 #"numV-n"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"sto"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 14 3 3 #"thr"
0 0 24 3 1 #" "
0 0 14 3 3 #"pro"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";; The store associates memory locations with their values."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 5 #"Store"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 7 #"mtStore"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 6 #"aStore"
0 0 24 3 2 #" ("
0 0 14 3 4 #"locn"
0 0 24 3 1 #" "
0 0 14 3 8 #"integer?"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 12 #"D-PLE-value?"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 10 #"more-store"
0 0 24 3 1 #" "
0 0 14 3 6 #"Store?"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; lookup-store : integer Store -> D-PLE-Value"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";; Finds the value at location locn in store or errors if it is unde"
 #"fined"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"lookup-store"
0 0 24 3 1 #" "
0 0 14 3 4 #"locn"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" (["
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"lookup-helper"
0 0 24 3 1 #" "
0 0 14 3 4 #"locn"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 5 #"Store"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 7 #"mtStore"
0 0 24 3 5 #" () ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"lookup-store"
0 0 24 3 1 #" "
0 0 19 3 32 #"\"unallocated memory location ~a\""
0 0 24 3 1 #" "
0 0 14 3 4 #"locn"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 6 #"aStore"
0 0 24 3 2 #" ("
0 0 14 3 10 #"alloc-locn"
0 0 24 3 1 #" "
0 0 14 3 11 #"alloc-value"
0 0 24 3 1 #" "
0 0 14 3 10 #"rest-store"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 10 #"alloc-locn"
0 0 24 3 1 #" "
0 0 14 3 4 #"locn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 14 3 11 #"alloc-value"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 13 #"lookup-helper"
0 0 24 3 1 #" "
0 0 14 3 4 #"locn"
0 0 24 3 1 #" "
0 0 14 3 10 #"rest-store"
0 0 24 3 6 #"))])])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"lookup-helper"
0 0 24 3 1 #" "
0 0 14 3 4 #"locn"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; get-next-memory-location : Store -> integer"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";; produce a value one larger than the largest store address used so"
 #" far"
) 0 0 24 29 1 #"\n"
0 0 17 3 38 #";; or if the store is empty, produce 1"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 24 #"get-next-memory-location"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 5 #"Store"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 7 #"mtStore"
0 0 24 3 4 #" () "
0 0 21 3 1 #"1"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 6 #"aStore"
0 0 24 3 2 #" ("
0 0 14 3 10 #"alloc-locn"
0 0 24 3 1 #" "
0 0 14 3 11 #"alloc-value"
0 0 24 3 1 #" "
0 0 14 3 10 #"rest-store"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 3 #"max"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 10 #"alloc-locn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 24 #"get-next-memory-location"
0 0 24 3 1 #" "
0 0 14 3 10 #"rest-store"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";;;;; Scheduling functions for cooperative multitasking"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 101
(
 #";; in this context, a ContFun is a function (D-PLE-value Store Strin"
 #"g threads proms -> A) for some A."
) 0 0 24 29 1 #"\n"
0 0 17 3 28 #";; (a Continuation Function)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";; schedule-computation-for-later : ContFun (list ContFun) -> (list "
 #"ContFun)"
) 0 0 24 29 1 #"\n"
0 0 17 3 57 #";; Appends a continuation function to be evaluated later."
0 0 24 29 1 #"\n"
0 0 17 3 56 #";; It ends up providing round-robin scheduling of tasks."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 30 #"schedule-computation-for-later"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 3 #"lok"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 3 #"lok"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";; context-switch : Value Store String (list ContFun) ContFun -> A"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; This function represents the scheduler behaviour."
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";; It evaluates the first available pending continuation on the list"
 #"."
) 0 0 24 29 1 #"\n"
0 0 17 3 60
#";; If there is no pending computation, it produces an error."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"context-switch"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 3 1 #" "
0 0 14 3 20 #"pending-computations"
0 0 24 3 1 #" "
0 0 14 3 8 #"promises"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 20 #"pending-computations"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 48 #"\"NOTHING ELSE TO DO!  This should never happen.\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 6 #"next-k"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 20 #"pending-computations"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"next-k"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 20 #"pending-computations"
0 0 24 3 2 #") "
0 0 14 3 8 #"promises"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 100
(
 #";; The Resolved Promises dictionary associates promise IDs with thei"
 #"r values once they are resolved."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 16 #"ResolvedPromises"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"mtRPs"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 15 #"resolvedPromise"
0 0 24 3 2 #" ("
0 0 14 3 10 #"promise-id"
0 0 24 3 1 #" "
0 0 14 3 8 #"integer?"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 12 #"D-PLE-value?"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 10 #"more-store"
0 0 24 3 1 #" "
0 0 14 3 17 #"ResolvedPromises?"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";; lookup-promise-value : Number ResolvedPromises -> (or D-PLE-Value"
 #"? false)"
) 0 0 24 29 1 #"\n"
0 0 17 3 54 #";; Returns the value if the promise has been resolved."
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; If not found, it returns false."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"lookup-promise-value"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 8 #"promises"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 16 #"ResolvedPromises"
0 0 24 3 1 #" "
0 0 14 3 8 #"promises"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 5 #"mtRPs"
0 0 24 3 4 #" () "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 15 #"resolvedPromise"
0 0 24 3 2 #" ("
0 0 14 3 4 #"r-id"
0 0 24 3 1 #" "
0 0 14 3 5 #"r-val"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"r-id"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 14 3 5 #"r-val"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 20 #"lookup-promise-value"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";; do-once-promise-is-resolved : Number ContFun -> ContFun"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";; This function builds a pending computation (to be later scheduled"
 #"-for-later)"
) 0 0 24 29 1 #"\n"
0 0 17 3 51 #";; such that checks if a promise has been resolved."
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";; once it is resolved, it calls continuation k with its resolved va"
 #"lue."
) 0 0 24 29 1 #"\n"
0 0 17 3 106
(
 #";; if it has not been resolved yet,  the computation context switche"
 #"s after rescheduling itself for later."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 27 #"do-once-promise-is-resolved"
0 0 24 3 1 #" "
0 0 14 3 10 #"promise-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" (["
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"computation-helper"
0 0 24 3 1 #" "
0 0 14 3 10 #"promise-id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"_"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 3 1 #" "
0 0 14 3 7 #"threads"
0 0 24 3 1 #" "
0 0 14 3 17 #"resolved-promises"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" [("
0 0 14 3 13 #"promise-value"
0 0 24 3 2 #" ("
0 0 14 3 20 #"lookup-promise-value"
0 0 24 3 1 #" "
0 0 14 3 10 #"promise-id"
0 0 24 3 1 #" "
0 0 14 3 17 #"resolved-promises"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 13 #"promise-value"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 11 #"D-PLE-value"
0 0 24 3 1 #" "
0 0 14 3 13 #"promise-value"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ["
0 0 14 3 8 #"promiseV"
0 0 24 3 2 #" ("
0 0 14 3 14 #"new-promise-id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                                "
0 0 17 3 110
(
 #";; Is the resolved promise value /ANOTHER/ promise? If so, we should"
 #" wait for that one to be resolved instead!"
) 0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 14 #"context-switch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"voidV"
0 0 24 3 2 #") "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 14 3 30 #"schedule-computation-for-later"
0 0 24 3 2 #" ("
0 0 14 3 18 #"computation-helper"
0 0 24 3 1 #" "
0 0 14 3 14 #"new-promise-id"
0 0 24 3 2 #") "
0 0 14 3 7 #"threads"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                                "
0 0 14 3 17 #"resolved-promises"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 17 3 112
(
 #"; If it is not a promise, we can continue with the original work we "
 #"wanted to do after the promise was resolved!"
) 0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 13 #"promise-value"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 3 1 #" "
0 0 14 3 7 #"threads"
0 0 24 3 1 #" "
0 0 14 3 17 #"resolved-promises"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 17 3 103
(
 #"; If we have not resolved the promise yet, we reschedule ourselves f"
 #"or later and yield the computation."
) 0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 14 #"context-switch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"voidV"
0 0 24 3 2 #") "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 30 #"schedule-computation-for-later"
0 0 24 3 2 #" ("
0 0 14 3 18 #"computation-helper"
0 0 24 3 1 #" "
0 0 14 3 10 #"promise-id"
0 0 24 3 2 #") "
0 0 14 3 7 #"threads"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                    "
0 0 14 3 17 #"resolved-promises"
0 0 24 3 6 #"))))])"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 66
#";; We trampoline our helper function with the original promise-id."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 18 #"computation-helper"
0 0 24 3 1 #" "
0 0 14 3 10 #"promise-id"
0 0 24 3 35 #")))                                "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";;  resolve-promise-and-continue : Number -> ContFun"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";;  this continuation updates the dictionary of resolved promises an"
 #"d then just"
) 0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";;  context switches (\"continues\") to do the rest of the computati"
 #"ons pending."
) 0 0 24 29 1 #"\n"
0 0 17 3 90
(
 #";;  It is the action we perform when we have finished the computatio"
 #"n thread of a promise:"
) 0 0 24 29 1 #"\n"
0 0 17 3 53 #";;  Just resolve and see what is left to be executed!"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 28 #"resolve-promise-and-continue"
0 0 24 3 1 #" "
0 0 14 3 10 #"promise-id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 41 #";; We are returning a lambda (a ContFun!)"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 14 #"resolved-value"
0 0 24 3 1 #" "
0 0 14 3 8 #"store-rv"
0 0 24 3 1 #" "
0 0 14 3 9 #"stdout-rv"
0 0 24 3 1 #" "
0 0 14 3 10 #"threads-rv"
0 0 24 3 1 #" "
0 0 14 3 8 #"proms-rv"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 89
(
 #"; Once the promise value is computed, we actually just need to updat"
 #"e the promise values:"
) 0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 14 #"resolved-proms"
0 0 24 3 2 #" ("
0 0 14 3 15 #"resolvedPromise"
0 0 24 3 1 #" "
0 0 14 3 10 #"promise-id"
0 0 24 3 1 #" "
0 0 14 3 14 #"resolved-value"
0 0 24 3 1 #" "
0 0 14 3 8 #"proms-rv"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 63
#"; and we can context switch to do the next computation pending:"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 14 #"context-switch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"voidV"
0 0 24 3 2 #") "
0 0 14 3 8 #"store-rv"
0 0 24 3 1 #" "
0 0 14 3 9 #"stdout-rv"
0 0 24 3 1 #" "
0 0 14 3 10 #"threads-rv"
0 0 24 3 1 #" "
0 0 14 3 14 #"resolved-proms"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";; interp/k : D-PLE Env Store (D-PLE-value store stdout threads prom"
 #"s -> A) -> A"
) 0 0 24 29 1 #"\n"
0 0 17 3 31 #";;  Our interpreter definition."
0 0 24 29 1 #"\n"
0 0 17 3 112
(
 #";;  next-promise-id is defined in the local so that every time we ca"
 #"ll interp we reset our promise id generator."
) 0 0 24 29 1 #"\n"
0 0 17 3 53 #";;  otherwise, interp/k just trampolines to helper/k."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"interp/k"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [ "
0 0 17 3 33 #";; next-promise-id : () -> Number"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 67
#";; Provides an unused number that will act as a promise identifier."
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 38 #";; Useful for creating new promiseV's!"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"next-promise-id"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 7 #"last-id"
0 0 24 3 2 #" ("
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 8 #"set-box!"
0 0 24 3 1 #" "
0 0 14 3 7 #"last-id"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 2 #" ("
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 7 #"last-id"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 7 #"last-id"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 57 #";; helper : D-PLE Env Store (D-PLE-value Store -> A) -> A"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 51 #";; evaluates the exp in env using the memory store,"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 33 #";; in continuation-passing style."
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"helper/k"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 17 3 22 #"; The original program"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 17 3 17 #"; The environment"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 17 3 11 #"; The store"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 14 3 6 #"stdout"
0 0 24 3 1 #" "
0 0 17 3 28 #"; The standard output string"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 14 3 7 #"threads"
0 0 24 3 1 #" "
0 0 17 3 50 #"; The computations that have not been finished yet"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 14 3 5 #"proms"
0 0 24 3 1 #" "
0 0 17 3 31 #"; The already resolved promises"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 14 3 1 #"k"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 5 #"D-PLE"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 3 #"num"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 3 1 #" "
0 0 14 3 7 #"threads"
0 0 24 3 1 #" "
0 0 14 3 5 #"proms"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 3 #"add"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 8 #"helper/k"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 3 1 #" "
0 0 14 3 7 #"threads"
0 0 24 3 1 #" "
0 0 14 3 5 #"proms"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"lv"
0 0 24 3 1 #" "
0 0 14 3 7 #"store-l"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-l"
0 0 24 3 1 #" "
0 0 14 3 9 #"threads-l"
0 0 24 3 1 #" "
0 0 14 3 7 #"proms-l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 8 #"helper/k"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 7 #"store-l"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-l"
0 0 24 3 1 #" "
0 0 14 3 9 #"threads-l"
0 0 24 3 1 #" "
0 0 14 3 7 #"proms-l"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"rv"
0 0 24 3 1 #" "
0 0 14 3 7 #"store-r"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-r"
0 0 24 3 1 #" "
0 0 14 3 9 #"threads-r"
0 0 24 3 1 #" "
0 0 14 3 7 #"proms-r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 6 #"num+/k"
0 0 24 3 1 #" "
0 0 14 3 2 #"lv"
0 0 24 3 1 #" "
0 0 14 3 2 #"rv"
0 0 24 3 1 #" "
0 0 14 3 7 #"store-r"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-r"
0 0 24 3 1 #" "
0 0 14 3 9 #"threads-r"
0 0 24 3 1 #" "
0 0 14 3 7 #"proms-r"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 6 #")))))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 2 #"id"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"name"
0 0 24 3 3 #") ("
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                             "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 3 1 #" "
0 0 14 3 7 #"threads"
0 0 24 3 1 #" "
0 0 14 3 5 #"proms"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 3 #"if0"
0 0 24 3 2 #" ("
0 0 14 3 3 #"tst"
0 0 24 3 1 #" "
0 0 14 3 3 #"thn"
0 0 24 3 1 #" "
0 0 14 3 3 #"els"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 8 #"helper/k"
0 0 24 3 1 #" "
0 0 14 3 3 #"tst"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 3 1 #" "
0 0 14 3 7 #"threads"
0 0 24 3 1 #" "
0 0 14 3 5 #"proms"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"tst-val"
0 0 24 3 1 #" "
0 0 14 3 7 #"sto-tst"
0 0 24 3 1 #" "
0 0 14 3 10 #"stdout-tst"
0 0 24 3 1 #" "
0 0 14 3 11 #"threads-tst"
0 0 24 3 1 #" "
0 0 14 3 9 #"proms-tst"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 11 #"D-PLE-value"
0 0 24 3 1 #" "
0 0 14 3 7 #"tst-val"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ["
0 0 14 3 4 #"numV"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"zero?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 8 #"helper/k"
0 0 24 3 1 #" "
0 0 14 3 3 #"thn"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 7 #"sto-tst"
0 0 24 3 1 #" "
0 0 14 3 10 #"stdout-tst"
0 0 24 3 1 #" "
0 0 14 3 11 #"threads-tst"
0 0 24 3 1 #" "
0 0 14 3 9 #"proms-tst"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 8 #"helper/k"
0 0 24 3 1 #" "
0 0 14 3 3 #"els"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 7 #"sto-tst"
0 0 24 3 1 #" "
0 0 14 3 10 #"stdout-tst"
0 0 24 3 1 #" "
0 0 14 3 11 #"threads-tst"
0 0 24 3 1 #" "
0 0 14 3 9 #"proms-tst"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 58
#"\"The test expression of an if0 must evaluate to a number.\""
0 0 24 3 6 #")])))]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 8 #"make-box"
0 0 24 3 2 #" ("
0 0 14 3 2 #"be"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 17 3 31 #"; (1) evaluate be to a value bv"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 17 3 46 #"; (2) get the next available memory location m"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 17 3 41 #"; (3) put bv into location m in the store"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 17 3 45 #"; (4) evaluate to (boxV m) with the NEW store"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 8 #"helper/k"
0 0 24 3 1 #" "
0 0 14 3 2 #"be"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 3 1 #" "
0 0 14 3 7 #"threads"
0 0 24 3 1 #" "
0 0 14 3 5 #"proms"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"bv"
0 0 24 3 1 #" "
0 0 14 3 7 #"store-b"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-b"
0 0 24 3 1 #" "
0 0 14 3 9 #"threads-b"
0 0 24 3 1 #" "
0 0 14 3 7 #"proms-b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" [("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-locn"
0 0 24 3 2 #" ("
0 0 14 3 24 #"get-next-memory-location"
0 0 24 3 1 #" "
0 0 14 3 7 #"store-b"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 4 #"boxV"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-locn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 6 #"aStore"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-locn"
0 0 24 3 1 #" "
0 0 14 3 2 #"bv"
0 0 24 3 1 #" "
0 0 14 3 7 #"store-b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                         "
0 0 14 3 8 #"stdout-b"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                         "
0 0 14 3 9 #"threads-b"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                         "
0 0 14 3 7 #"proms-b"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 47 #"; TODO 1 : Fix the implementation of this case."
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 3 #"fun"
0 0 24 3 2 #" ("
0 0 14 3 8 #"arg-name"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 1 #"k"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 8 #"closureV"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"argv"
0 0 24 3 1 #" "
0 0 14 3 7 #"store-f"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-f"
0 0 24 3 1 #" "
0 0 14 3 9 #"threads-f"
0 0 24 3 1 #" "
0 0 14 3 7 #"proms-f"
0 0 24 3 1 #" "
0 0 14 3 8 #"caller/k"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 8 #"helper/k"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 5 #"anEnv"
0 0 24 3 1 #" "
0 0 14 3 8 #"arg-name"
0 0 24 3 1 #" "
0 0 14 3 4 #"argv"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 14 3 7 #"store-f"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-f"
0 0 24 3 1 #" "
0 0 14 3 9 #"threads-f"
0 0 24 3 1 #" "
0 0 14 3 7 #"proms-f"
0 0 24 3 1 #" "
0 0 14 3 8 #"caller/k"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 14 3 5 #"store"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 14 3 6 #"stdout"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 14 3 7 #"threads"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 14 3 5 #"proms"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    )"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 3 #"app"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 8 #"helper/k"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 3 1 #" "
0 0 14 3 7 #"threads"
0 0 24 3 1 #" "
0 0 14 3 5 #"proms"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"the-fun"
0 0 24 3 1 #" "
0 0 14 3 7 #"store-f"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-f"
0 0 24 3 1 #" "
0 0 14 3 9 #"threads-f"
0 0 24 3 1 #" "
0 0 14 3 7 #"proms-f"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 8 #"helper/k"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 7 #"store-f"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-f"
0 0 24 3 1 #" "
0 0 14 3 9 #"threads-f"
0 0 24 3 1 #" "
0 0 14 3 7 #"proms-f"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"the-arg"
0 0 24 3 1 #" "
0 0 14 3 7 #"store-a"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-a"
0 0 24 3 1 #" "
0 0 14 3 9 #"threads-a"
0 0 24 3 1 #" "
0 0 14 3 7 #"proms-a"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 11 #"D-PLE-value"
0 0 24 3 1 #" "
0 0 14 3 7 #"the-fun"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ["
0 0 14 3 8 #"closureV"
0 0 24 3 2 #" ("
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 56 #"                                                       ("
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 7 #"the-arg"
0 0 24 3 1 #" "
0 0 14 3 7 #"store-a"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-a"
0 0 24 3 1 #" "
0 0 14 3 9 #"threads-a"
0 0 24 3 1 #" "
0 0 14 3 7 #"proms-a"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"You can only apply closures!\""
0 0 24 3 8 #")])))))]"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 4 #"mult"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 8 #"helper/k"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 3 1 #" "
0 0 14 3 7 #"threads"
0 0 24 3 1 #" "
0 0 14 3 5 #"proms"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"lv"
0 0 24 3 1 #" "
0 0 14 3 7 #"store-l"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-l"
0 0 24 3 1 #" "
0 0 14 3 9 #"threads-l"
0 0 24 3 1 #" "
0 0 14 3 7 #"proms-l"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 8 #"helper/k"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 7 #"store-l"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-l"
0 0 24 3 1 #" "
0 0 14 3 9 #"threads-l"
0 0 24 3 1 #" "
0 0 14 3 7 #"proms-l"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"rv"
0 0 24 3 1 #" "
0 0 14 3 7 #"store-r"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-r"
0 0 24 3 1 #" "
0 0 14 3 9 #"threads-r"
0 0 24 3 1 #" "
0 0 14 3 7 #"proms-r"
0 0 24 3 3 #")  "
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 6 #"num*/k"
0 0 24 3 1 #" "
0 0 14 3 2 #"lv"
0 0 24 3 1 #" "
0 0 14 3 2 #"rv"
0 0 24 3 1 #" "
0 0 14 3 7 #"store-r"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-r"
0 0 24 3 1 #" "
0 0 14 3 9 #"threads-r"
0 0 24 3 1 #" "
0 0 14 3 7 #"proms-r"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 6 #")))))]"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 7 #"setbox!"
0 0 24 3 2 #" ("
0 0 14 3 2 #"be"
0 0 24 3 1 #" "
0 0 14 3 2 #"ve"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 8 #"helper/k"
0 0 24 3 1 #" "
0 0 14 3 2 #"be"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 3 1 #" "
0 0 14 3 7 #"threads"
0 0 24 3 1 #" "
0 0 14 3 5 #"proms"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"bv"
0 0 24 3 1 #" "
0 0 14 3 7 #"store-b"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-b"
0 0 24 3 1 #" "
0 0 14 3 9 #"threads-b"
0 0 24 3 1 #" "
0 0 14 3 7 #"proms-b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 8 #"helper/k"
0 0 24 3 1 #" "
0 0 14 3 2 #"ve"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 7 #"store-b"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-b"
0 0 24 3 1 #" "
0 0 14 3 9 #"threads-b"
0 0 24 3 1 #" "
0 0 14 3 7 #"proms-b"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"vv"
0 0 24 3 1 #" "
0 0 14 3 7 #"store-v"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-v"
0 0 24 3 1 #" "
0 0 14 3 9 #"threads-v"
0 0 24 3 1 #" "
0 0 14 3 7 #"proms-v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                               ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 11 #"D-PLE-value"
0 0 24 3 1 #" "
0 0 14 3 2 #"bv"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ["
0 0 14 3 4 #"boxV"
0 0 24 3 2 #" ("
0 0 14 3 4 #"locn"
0 0 24 3 3 #") ("
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 2 #"vv"
0 0 24 3 2 #" ("
0 0 14 3 6 #"aStore"
0 0 24 3 1 #" "
0 0 14 3 4 #"locn"
0 0 24 3 1 #" "
0 0 14 3 2 #"vv"
0 0 24 3 1 #" "
0 0 14 3 7 #"store-v"
0 0 24 3 2 #") "
0 0 14 3 8 #"stdout-v"
0 0 24 3 1 #" "
0 0 14 3 9 #"threads-v"
0 0 24 3 1 #" "
0 0 14 3 7 #"proms-v"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 62
#"\"the box expression of a setbox! must evaluate to a box value\""
0 0 24 3 8 #")])))))]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 6 #"un-box"
0 0 24 3 2 #" ("
0 0 14 3 2 #"be"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 8 #"helper/k"
0 0 24 3 1 #" "
0 0 14 3 2 #"be"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 3 1 #" "
0 0 14 3 7 #"threads"
0 0 24 3 1 #" "
0 0 14 3 5 #"proms"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"bv"
0 0 24 3 1 #" "
0 0 14 3 7 #"store-b"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-b"
0 0 24 3 1 #" "
0 0 14 3 9 #"threads-b"
0 0 24 3 1 #" "
0 0 14 3 7 #"proms-b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 11 #"D-PLE-value"
0 0 24 3 1 #" "
0 0 14 3 2 #"bv"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ["
0 0 14 3 4 #"boxV"
0 0 24 3 2 #" ("
0 0 14 3 4 #"locn"
0 0 24 3 3 #") ("
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 12 #"lookup-store"
0 0 24 3 1 #" "
0 0 14 3 4 #"locn"
0 0 24 3 1 #" "
0 0 14 3 7 #"store-b"
0 0 24 3 2 #") "
0 0 14 3 7 #"store-b"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-b"
0 0 24 3 1 #" "
0 0 14 3 9 #"threads-b"
0 0 24 3 1 #" "
0 0 14 3 7 #"proms-b"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 61
#"\"the box expression of an unbox must evaluate to a box value\""
0 0 24 3 6 #")])))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 10 #"empty-cell"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 3 #"mtV"
0 0 24 3 2 #") "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 3 1 #" "
0 0 14 3 7 #"threads"
0 0 24 3 1 #" "
0 0 14 3 5 #"proms"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 9 #"cons-cell"
0 0 24 3 2 #" ("
0 0 14 3 2 #"hd"
0 0 24 3 1 #" "
0 0 14 3 2 #"tl"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 8 #"helper/k"
0 0 24 3 1 #" "
0 0 14 3 2 #"hd"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 3 1 #" "
0 0 14 3 7 #"threads"
0 0 24 3 1 #" "
0 0 14 3 5 #"proms"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"hd-v"
0 0 24 3 1 #" "
0 0 14 3 8 #"store-hd"
0 0 24 3 1 #" "
0 0 14 3 9 #"stdout-hd"
0 0 24 3 1 #" "
0 0 14 3 10 #"threads-hd"
0 0 24 3 1 #" "
0 0 14 3 8 #"proms-hd"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 8 #"helper/k"
0 0 24 3 1 #" "
0 0 14 3 2 #"tl"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 8 #"store-hd"
0 0 24 3 1 #" "
0 0 14 3 9 #"stdout-hd"
0 0 24 3 1 #" "
0 0 14 3 10 #"threads-hd"
0 0 24 3 1 #" "
0 0 14 3 8 #"proms-hd"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                               ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"tl-v"
0 0 24 3 1 #" "
0 0 14 3 8 #"store-tl"
0 0 24 3 1 #" "
0 0 14 3 9 #"stdout-tl"
0 0 24 3 1 #" "
0 0 14 3 10 #"threads-tl"
0 0 24 3 1 #" "
0 0 14 3 8 #"proms-tl"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ("
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 5 #"consV"
0 0 24 3 1 #" "
0 0 14 3 4 #"hd-v"
0 0 24 3 1 #" "
0 0 14 3 4 #"tl-v"
0 0 24 3 2 #") "
0 0 14 3 8 #"store-tl"
0 0 24 3 1 #" "
0 0 14 3 9 #"stdout-tl"
0 0 24 3 1 #" "
0 0 14 3 10 #"threads-tl"
0 0 24 3 1 #" "
0 0 14 3 8 #"proms-tl"
0 0 24 3 6 #")))))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 58
#";; when we hit a promise, we want to schedule it for later"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 30 #";; then continue where we were"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 44 #";; once the computation is actually finished"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 49 #";; we want to relinquish control of the processor"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 30 #";; and return to the scheduler"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 7 #"promise"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 10 #"promise-id"
0 0 24 3 2 #" ("
0 0 14 3 15 #"next-promise-id"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ["
0 0 14 3 16 #"promise-contents"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                               "
0 0 17 3 46 #";; The promise itself will compute expr later:"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 1 #"_"
0 0 24 3 1 #" "
0 0 14 3 13 #"current-store"
0 0 24 3 1 #" "
0 0 14 3 14 #"current-stdout"
0 0 24 3 1 #" "
0 0 14 3 15 #"current-threads"
0 0 24 3 1 #" "
0 0 14 3 13 #"current-proms"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 8 #"helper/k"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 13 #"current-store"
0 0 24 3 1 #" "
0 0 14 3 14 #"current-stdout"
0 0 24 3 1 #" "
0 0 14 3 15 #"current-threads"
0 0 24 3 1 #" "
0 0 14 3 13 #"current-proms"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 28 #"resolve-promise-and-continue"
0 0 24 3 1 #" "
0 0 14 3 10 #"promise-id"
0 0 24 3 5 #")))])"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 8 #"promiseV"
0 0 24 3 1 #" "
0 0 14 3 10 #"promise-id"
0 0 24 3 2 #") "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 3 2 #" ("
0 0 14 3 30 #"schedule-computation-for-later"
0 0 24 3 1 #" "
0 0 14 3 16 #"promise-contents"
0 0 24 3 1 #" "
0 0 14 3 7 #"threads"
0 0 24 3 2 #") "
0 0 14 3 5 #"proms"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 39 #";; yield gives up the processor for now"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 70
(
 #";; we'll schedule ourselves for later and choose something else to r"
 #"un"
) 0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 5 #"yield"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 14 #"context-switch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"voidV"
0 0 24 3 2 #") "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 30 #"schedule-computation-for-later"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 7 #"threads"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                     "
0 0 14 3 5 #"proms"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 97
(
 #";; after creates a promise whose value would be resolved only after "
 #"another promise has finished."
) 0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 101
(
 #";; TODO 3 : find the bug in this implementation and fix it.  For a h"
 #"int, the comments specify what we"
) 0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 30 #";;          intend to do here!"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 5 #"after"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 14 #"promise-before"
0 0 24 3 1 #" "
0 0 14 3 14 #"after-callback"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 8 #"helper/k"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 14 #"promise-before"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 3 1 #" "
0 0 14 3 7 #"threads"
0 0 24 3 1 #" "
0 0 14 3 5 #"proms"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 9 #"promise-v"
0 0 24 3 1 #" "
0 0 14 3 7 #"store-p"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-p"
0 0 24 3 1 #" "
0 0 14 3 9 #"threads-p"
0 0 24 3 1 #" "
0 0 14 3 7 #"proms-p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 17 3 62
#"; At this point, we check that promise-v is an actual promise:"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 11 #"D-PLE-value"
0 0 24 3 1 #" "
0 0 14 3 9 #"promise-v"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ["
0 0 14 3 8 #"promiseV"
0 0 24 3 2 #" ("
0 0 14 3 10 #"promise-id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 8 #"helper/k"
0 0 24 3 1 #" "
0 0 14 3 14 #"after-callback"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 7 #"store-p"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-p"
0 0 24 3 1 #" "
0 0 14 3 9 #"threads-p"
0 0 24 3 1 #" "
0 0 14 3 7 #"proms-p"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 10 #"callback-v"
0 0 24 3 1 #" "
0 0 14 3 9 #"store-thn"
0 0 24 3 1 #" "
0 0 14 3 10 #"stdout-thn"
0 0 24 3 1 #" "
0 0 14 3 11 #"threads-thn"
0 0 24 3 1 #" "
0 0 14 3 9 #"proms-thn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 11 #"D-PLE-value"
0 0 24 3 1 #" "
0 0 14 3 10 #"callback-v"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ["
0 0 14 3 8 #"closureV"
0 0 24 3 2 #" ("
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 54 #"                                                      "
0 0 17 3 42 #";; We can now create the promise for after"
0 0 24 29 1 #"\n"
0 0 24 3 55 #"                                                      ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" (["
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"after-promise-id"
0 0 24 3 2 #" ("
0 0 14 3 15 #"next-promise-id"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 63
#"                                                              ["
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"after-behaviour"
0 0 24 29 1 #"\n"
0 0 24 3 64
#"                                                                "
0 0 17 3 76
(
 #";; This continuation value will be called once the previous promise "
 #"is done:"
) 0 0 24 29 1 #"\n"
0 0 24 3 65
#"                                                                ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 14 #"previous-value"
0 0 24 3 1 #" "
0 0 14 3 13 #"current-store"
0 0 24 3 1 #" "
0 0 14 3 14 #"current-stdout"
0 0 24 3 1 #" "
0 0 14 3 15 #"current-threads"
0 0 24 3 1 #" "
0 0 14 3 13 #"current-proms"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 67
#"                                                                  ("
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 14 #"previous-value"
0 0 24 3 1 #" "
0 0 14 3 13 #"current-store"
0 0 24 3 1 #" "
0 0 14 3 14 #"current-stdout"
0 0 24 3 1 #" "
0 0 14 3 15 #"current-threads"
0 0 24 3 1 #" "
0 0 14 3 13 #"current-proms"
0 0 24 29 1 #"\n"
0 0 24 3 73
(
 #"                                                                    "
 #"    ("
) 0 0 14 3 28 #"resolve-promise-and-continue"
0 0 24 3 1 #" "
0 0 14 3 16 #"after-promise-id"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 63
#"                                                              )"
0 0 24 29 1 #"\n"
0 0 24 3 56 #"                                                        "
0 0 17 3 39 #";; We now must do the first scheduling!"
0 0 24 29 1 #"\n"
0 0 24 3 57 #"                                                        ("
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 8 #"promiseV"
0 0 24 3 1 #" "
0 0 14 3 16 #"after-promise-id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 59
#"                                                           "
0 0 14 3 9 #"store-thn"
0 0 24 29 1 #"\n"
0 0 24 3 59
#"                                                           "
0 0 14 3 10 #"stdout-thn"
0 0 24 29 1 #"\n"
0 0 24 3 59
#"                                                           "
0 0 17 3 76
(
 #";; schedule-computation-for-later : ContFun (list ContFun) -> (list "
 #"ContFun)"
) 0 0 24 29 1 #"\n"
0 0 24 3 59
#"                                                           "
0 0 17 3 2 #";("
0 0 17 3 46 #"schedule-computation-for-later after-behaviour"
0 0 24 29 1 #"\n"
0 0 24 3 59
#"                                                           "
0 0 17 3 95
(
 #";want to schedule the after behaviour to happen after \"before-promi"
 #"se\" (promise-id) is resolved"
) 0 0 24 29 1 #"\n"
0 0 24 3 60
#"                                                           ("
0 0 14 3 30 #"schedule-computation-for-later"
0 0 24 3 2 #" ("
0 0 14 3 27 #"do-once-promise-is-resolved"
0 0 24 3 1 #" "
0 0 14 3 10 #"promise-id"
0 0 24 3 1 #" "
0 0 14 3 15 #"after-behaviour"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 91
(
 #"                                                                    "
 #"                       "
) 0 0 14 3 11 #"threads-thn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 59
#"                                                           "
0 0 14 3 9 #"proms-thn"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"Then should be a procedure\""
0 0 24 3 6 #")])))]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 46 #"\"after only works with a promise on first arg\""
0 0 24 3 6 #")])))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 120
(
 #";; TODO 4 : Implement \"all\".  We only provide you with a very mini"
 #"mal stub that does not have the appropriate behaviour."
) 0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 3 #"all"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 8 #"helper/k"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 3 1 #" "
0 0 14 3 7 #"threads"
0 0 24 3 1 #" "
0 0 14 3 5 #"proms"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 9 #"promise-a"
0 0 24 3 1 #" "
0 0 14 3 7 #"store-a"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-a"
0 0 24 3 1 #" "
0 0 14 3 9 #"threads-a"
0 0 24 3 1 #" "
0 0 14 3 7 #"proms-a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 11 #"D-PLE-value"
0 0 24 3 1 #" "
0 0 14 3 9 #"promise-a"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ["
0 0 14 3 8 #"promiseV"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 12 #"promise-a-id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 8 #"helper/k"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 7 #"store-a"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-a"
0 0 24 3 1 #" "
0 0 14 3 9 #"threads-a"
0 0 24 3 1 #" "
0 0 14 3 7 #"proms-a"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 9 #"promise-b"
0 0 24 3 1 #" "
0 0 14 3 7 #"store-b"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-b"
0 0 24 3 1 #" "
0 0 14 3 9 #"threads-b"
0 0 24 3 1 #" "
0 0 14 3 7 #"proms-b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 11 #"D-PLE-value"
0 0 24 3 1 #" "
0 0 14 3 9 #"promise-b"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ["
0 0 14 3 8 #"promiseV"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 12 #"promise-b-id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 5 #"consV"
0 0 24 3 1 #" "
0 0 14 3 12 #"promise-a-id"
0 0 24 3 2 #" ("
0 0 14 3 5 #"consV"
0 0 24 3 1 #" "
0 0 14 3 12 #"promise-b-id"
0 0 24 3 2 #" ("
0 0 14 3 3 #"mtV"
0 0 24 3 4 #"))) "
0 0 14 3 7 #"store-b"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-b"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 14 3 9 #"threads-b"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 14 3 7 #"proms-b"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"all must take only promises\""
0 0 24 3 6 #")])))]"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"all must take only promises\""
0 0 24 3 6 #")])))]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 4 #"race"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 8 #"helper/k"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 3 1 #" "
0 0 14 3 7 #"threads"
0 0 24 3 1 #" "
0 0 14 3 5 #"proms"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 9 #"promise-a"
0 0 24 3 1 #" "
0 0 14 3 7 #"store-a"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-a"
0 0 24 3 1 #" "
0 0 14 3 9 #"threads-a"
0 0 24 3 1 #" "
0 0 14 3 7 #"proms-a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 11 #"D-PLE-value"
0 0 24 3 1 #" "
0 0 14 3 9 #"promise-a"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ["
0 0 14 3 8 #"promiseV"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 12 #"promise-a-id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 8 #"helper/k"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 7 #"store-a"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-a"
0 0 24 3 1 #" "
0 0 14 3 9 #"threads-a"
0 0 24 3 1 #" "
0 0 14 3 7 #"proms-a"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 9 #"promise-b"
0 0 24 3 1 #" "
0 0 14 3 7 #"store-b"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-b"
0 0 24 3 1 #" "
0 0 14 3 9 #"threads-b"
0 0 24 3 1 #" "
0 0 14 3 7 #"proms-b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 11 #"D-PLE-value"
0 0 24 3 1 #" "
0 0 14 3 9 #"promise-b"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ["
0 0 14 3 8 #"promiseV"
0 0 24 3 2 #" ("
0 0 14 3 12 #"promise-b-id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 15 #"race-promise-id"
0 0 24 3 2 #" ("
0 0 14 3 15 #"next-promise-id"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ["
0 0 14 3 11 #"scheduled-a"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 30 #"schedule-computation-for-later"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 27 #"do-once-promise-is-resolved"
0 0 24 3 1 #" "
0 0 14 3 12 #"promise-a-id"
0 0 24 29 1 #"\n"
0 0 24 3 75
(
 #"                                                                    "
 #"      ("
) 0 0 14 3 28 #"resolve-promise-and-continue"
0 0 24 3 1 #" "
0 0 14 3 15 #"race-promise-id"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                             "
0 0 14 3 9 #"threads-b"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ["
0 0 14 3 14 #"scheduled-both"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 30 #"schedule-computation-for-later"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 27 #"do-once-promise-is-resolved"
0 0 24 3 1 #" "
0 0 14 3 12 #"promise-b-id"
0 0 24 29 1 #"\n"
0 0 24 3 75
(
 #"                                                                    "
 #"      ("
) 0 0 14 3 28 #"resolve-promise-and-continue"
0 0 24 3 1 #" "
0 0 14 3 15 #"race-promise-id"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                             "
0 0 14 3 11 #"scheduled-a"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 8 #"promiseV"
0 0 24 3 1 #" "
0 0 14 3 15 #"race-promise-id"
0 0 24 3 2 #") "
0 0 14 3 7 #"store-b"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-b"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                         "
0 0 14 3 14 #"scheduled-both"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                         "
0 0 14 3 7 #"proms-b"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"race must take only promises\""
0 0 24 3 6 #")])))]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"race must take only promises\""
0 0 24 3 6 #")])))]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 9 #"print-out"
0 0 24 3 2 #" ("
0 0 14 3 8 #"to-print"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 5 #"voidV"
0 0 24 3 2 #") "
0 0 14 3 5 #"store"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 3 1 #" "
0 0 14 3 8 #"to-print"
0 0 24 3 2 #") "
0 0 14 3 7 #"threads"
0 0 24 3 1 #" "
0 0 14 3 5 #"proms"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 8 #"resolved"
0 0 24 3 2 #" ("
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 8 #"helper/k"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 3 1 #" "
0 0 14 3 7 #"threads"
0 0 24 3 1 #" "
0 0 14 3 5 #"proms"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 15 3 2 #"\316\273"
0 0 24 3 2 #" ("
0 0 14 3 9 #"promise-v"
0 0 24 3 1 #" "
0 0 14 3 7 #"store-p"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-p"
0 0 24 3 1 #" "
0 0 14 3 9 #"threads-p"
0 0 24 3 1 #" "
0 0 14 3 7 #"proms-p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 11 #"D-PLE-value"
0 0 24 3 1 #" "
0 0 14 3 9 #"promise-v"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ["
0 0 14 3 8 #"promiseV"
0 0 24 3 2 #" ("
0 0 14 3 10 #"promise-id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 14 3 14 #"context-switch"
0 0 24 3 2 #" ("
0 0 14 3 5 #"voidV"
0 0 24 3 2 #") "
0 0 14 3 7 #"store-p"
0 0 24 3 1 #" "
0 0 14 3 8 #"stdout-p"
0 0 24 29 1 #"\n"
0 0 24 3 64
#"                                                                "
0 0 17 3 22 #"; Implicit yield here:"
0 0 24 29 1 #"\n"
0 0 24 3 65
#"                                                                ("
0 0 14 3 30 #"schedule-computation-for-later"
0 0 24 3 2 #" ("
0 0 14 3 27 #"do-once-promise-is-resolved"
0 0 24 3 1 #" "
0 0 14 3 10 #"promise-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 96
(
 #"                                                                    "
 #"                            "
) 0 0 14 3 9 #"threads-p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 64
#"                                                                "
0 0 14 3 7 #"proms-p"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 34 #"\"resolved must take only promises\""
0 0 24 3 6 #")])))]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"              ))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 75
(
 #"; Here we trampoline passing the arguments we got from the call to i"
 #"nterp/k"
) 0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"helper/k"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #" ("
0 0 14 3 5 #"mtRPs"
0 0 24 3 2 #") "
0 0 14 3 1 #"k"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"interp/k"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"mtEnv"
0 0 24 3 3 #") ("
0 0 14 3 7 #"mtStore"
0 0 24 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 3 #"sto"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 3 1 #" "
0 0 14 3 7 #"threads"
0 0 24 3 1 #" "
0 0 14 3 5 #"proms"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 9 #"displayln"
0 0 24 3 1 #" "
0 0 14 3 6 #"stdout"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"void"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 3 #"val"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; TODO 2 : Fix this implementation."
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;          You want to look at the output of the tests and fix this"
 #"!"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"run-for-p"
0 0 14 3 1 #"r"
0 0 14 3 3 #"int"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"interp/k"
0 0 24 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"mtEnv"
0 0 24 3 3 #") ("
0 0 14 3 7 #"mtStore"
0 0 24 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"              )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 15 3 6 #"let/cc"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 8 #"interp/k"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 5 #"anEnv"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 5 #"mtEnv"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"mtStore"
0 0 24 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 2 #"sr"
0 0 24 3 1 #" "
0 0 14 3 2 #"th"
0 0 24 3 1 #" "
0 0 14 3 2 #"pr"
0 0 24 3 3 #") ("
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 9 #"closureV?"
0 0 24 3 2 #" ("
0 0 15 3 6 #"let/cc"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 8 #"interp/k"
0 0 24 3 2 #" ("
0 0 14 3 3 #"fun"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"anEnv"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #") ("
0 0 14 3 5 #"mtEnv"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"mtStore"
0 0 24 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 2 #"sr"
0 0 24 3 1 #" "
0 0 14 3 2 #"th"
0 0 24 3 1 #" "
0 0 14 3 2 #"pr"
0 0 24 3 3 #") ("
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 15 3 6 #"let/cc"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 8 #"interp/k"
0 0 24 3 2 #" ("
0 0 14 3 3 #"app"
0 0 24 3 2 #" ("
0 0 14 3 3 #"fun"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"anEnv"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #") ("
0 0 14 3 5 #"mtEnv"
0 0 24 3 4 #")) ("
0 0 14 3 7 #"mtStore"
0 0 24 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 2 #"sr"
0 0 24 3 1 #" "
0 0 14 3 2 #"th"
0 0 24 3 1 #" "
0 0 14 3 2 #"pr"
0 0 24 3 3 #") ("
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 5 #"unbox"
0 0 24 3 2 #" {"
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 5 #"}}) ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"seqn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"}) ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"b"
0 0 24 3 2 #" {"
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 7 #"setbox!"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #" {"
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 5 #"}}}})"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 7 #"setbox!"
0 0 24 3 2 #" {"
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"} "
0 0 21 3 1 #"6"
0 0 24 3 4 #"}) ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"b"
0 0 24 3 2 #" {"
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  {"
0 0 14 3 1 #"+"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 7 #"setbox!"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #"} {"
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     {"
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 4 #"}}})"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"b"
0 0 24 3 2 #" {"
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  {"
0 0 14 3 1 #"+"
0 0 24 3 2 #" {"
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 7 #"setbox!"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #"} {"
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 5 #"}}}})"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"b"
0 0 24 3 2 #" {"
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #"}} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 3 #"box"
0 0 24 3 2 #" {"
0 0 14 3 7 #"setbox!"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"}} {"
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 6 #"}}}) ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 3 #"'10"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #"})"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 3 #"110"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #"})"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 3 #"-90"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #"})"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 4 #"1000"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"+"
0 0 24 3 2 #" {"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #"}})"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"13"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"if0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #"})"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"if0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #"})"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 9 #"cons-cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #" {"
0 0 14 3 9 #"cons-cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 3 #"}})"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"consV"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 5 #"consV"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 3 #"mtV"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 9 #"cons-cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" {"
0 0 14 3 9 #"cons-cell"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #" {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"}} "
0 0 14 3 10 #"empty-cell"
0 0 24 3 3 #"}})"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"consV"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"consV"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 3 #"mtV"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 2 #"} "
0 0 21 3 2 #"10"
0 0 24 3 2 #"} "
0 0 21 3 3 #"100"
0 0 24 3 2 #"})"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 13 #"run-for-print"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"a"
0 0 19 3 1 #"\""
0 0 24 3 3 #"} {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"b"
0 0 19 3 1 #"\""
0 0 24 3 4 #"}}) "
0 0 19 3 3 #"\"ab"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 13 #"run-for-print"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"+"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"a"
0 0 19 3 1 #"\""
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"b"
0 0 19 3 1 #"\""
0 0 24 3 2 #"} "
0 0 21 3 1 #"3"
0 0 24 3 4 #"}} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 2 #"} "
0 0 21 3 1 #"5"
0 0 24 3 4 #"}}) "
0 0 19 3 4 #"\"abc"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; test promises"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; processes yielding to each other"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";; Note: This test (and other later ones) likely requires to fix TOD"
 #"O 3 to work!"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 13 #"run-for-print"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 8 #"resolved"
0 0 24 3 2 #" {"
0 0 14 3 5 #"after"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"a"
0 0 19 3 1 #"\""
0 0 24 3 4 #"}} {"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"v"
0 0 24 3 3 #"} {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 5 #"}}}})"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 19 3 3 #"\"ac"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #"; Note: This test (and other later ones) requires to fix TODO 2 and "
 #"TODO 3 to work!"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 13 #"run-for-print"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"a"
0 0 19 3 1 #"\""
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            {"
0 0 14 3 5 #"after"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"v"
0 0 24 3 3 #"} {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 5 #"}}}})"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"test/pred"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"a"
0 0 19 3 1 #"\""
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       {"
0 0 14 3 5 #"after"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"v"
0 0 24 3 3 #"} {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 5 #"}}}})"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 9 #"promiseV?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 13 #"run-for-print"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"a"
0 0 19 3 1 #"\""
0 0 24 3 3 #"} {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"b"
0 0 19 3 1 #"\""
0 0 24 3 4 #"}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            {"
0 0 14 3 8 #"resolved"
0 0 24 3 2 #" {"
0 0 14 3 5 #"after"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"v"
0 0 24 3 3 #"} {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 6 #"}}}}})"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 19 3 4 #"\"abc"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 13 #"run-for-print"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"a"
0 0 19 3 1 #"\""
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 3 #"} {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"b"
0 0 19 3 1 #"\""
0 0 24 3 5 #"}}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"A"
0 0 19 3 1 #"\""
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  {"
0 0 14 3 8 #"resolved"
0 0 24 3 2 #" {"
0 0 14 3 5 #"after"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 1 #"v"
0 0 24 3 3 #"} {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"c"
0 0 19 3 1 #"\""
0 0 24 3 7 #"}}}}}})"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 19 3 5 #"\"Aabc"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 13 #"run-for-print"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"a"
0 0 19 3 1 #"\""
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 3 #"} {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"b"
0 0 19 3 1 #"\""
0 0 24 3 5 #"}}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"b"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"giraffe"
0 0 19 3 1 #"\""
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  {"
0 0 14 3 8 #"resolved"
0 0 24 3 2 #" {"
0 0 14 3 3 #"all"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 5 #"}}}})"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 19 3 10 #"\"agiraffeb"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; not very nice of process a! but b gets scheduled at the end"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 13 #"run-for-print"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"a"
0 0 19 3 1 #"\""
0 0 24 3 3 #"} {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"b"
0 0 19 3 1 #"\""
0 0 24 3 4 #"}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"b"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"giraffe"
0 0 19 3 1 #"\""
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  {"
0 0 14 3 8 #"resolved"
0 0 24 3 2 #" {"
0 0 14 3 3 #"all"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 5 #"}}}})"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 19 3 10 #"\"abgiraffe"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 13 #"run-for-print"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"a"
0 0 19 3 1 #"\""
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 3 #"} {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"b"
0 0 19 3 1 #"\""
0 0 24 3 5 #"}}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"b"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"giraffe"
0 0 19 3 1 #"\""
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 3 #"} {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"hello"
0 0 19 3 1 #"\""
0 0 24 3 5 #"}}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  {"
0 0 14 3 8 #"resolved"
0 0 24 3 2 #" {"
0 0 14 3 3 #"all"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 5 #"}}}})"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 19 3 15 #"\"agiraffebhello"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";; race"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 13 #"run-for-print"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"a"
0 0 19 3 1 #"\""
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 3 #"} {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"b"
0 0 19 3 1 #"\""
0 0 24 3 5 #"}}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"b"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"giraffe"
0 0 19 3 1 #"\""
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  {"
0 0 14 3 8 #"resolved"
0 0 24 3 2 #" {"
0 0 14 3 4 #"race"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 5 #"}}}})"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 19 3 9 #"\"agiraffe"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; not very nice of process a! but b gets scheduled at the end"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; notice this is because the {race} primitive is scheduled after bot"
 #"h"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 13 #"run-for-print"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"a"
0 0 19 3 1 #"\""
0 0 24 3 3 #"} {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"b"
0 0 19 3 1 #"\""
0 0 24 3 4 #"}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"b"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"giraffe"
0 0 19 3 1 #"\""
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  {"
0 0 14 3 8 #"resolved"
0 0 24 3 2 #" {"
0 0 14 3 4 #"race"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 5 #"}}}})"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 19 3 10 #"\"abgiraffe"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 13 #"run-for-print"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"a"
0 0 19 3 1 #"\""
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 3 #"} {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"b\""
0 0 24 3 5 #"}}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"b"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"giraffe\""
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 3 #"} {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"hello\""
0 0 24 3 5 #"}}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  {"
0 0 14 3 8 #"resolved"
0 0 24 3 2 #" {"
0 0 14 3 4 #"race"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 5 #"}}}})"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 19 3 16 #"\"agiraffebhello\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; complex"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 13 #"run-for-print"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 3 #"} {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"b\""
0 0 24 3 5 #"}}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"b"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"giraffe\""
0 0 24 3 3 #"} {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"hello\""
0 0 24 3 5 #"}}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  {"
0 0 14 3 8 #"resolved"
0 0 24 3 2 #" {"
0 0 14 3 4 #"race"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 5 #"}}}})"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 19 3 16 #"\"abgiraffehello\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 13 #"run-for-print"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 3 #"} {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"b\""
0 0 24 3 5 #"}}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"b"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"giraffe\""
0 0 24 3 3 #"} {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"hello\""
0 0 24 3 6 #"}}}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  {"
0 0 14 3 8 #"resolved"
0 0 24 3 2 #" {"
0 0 14 3 4 #"race"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 5 #"}}}})"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 19 3 4 #"\"ab\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 13 #"run-for-print"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 3 #"} {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"b\""
0 0 24 3 5 #"}}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"b"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"giraffe\""
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 3 #"} {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"hello\""
0 0 24 3 6 #"}}}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  {"
0 0 14 3 8 #"resolved"
0 0 24 3 2 #" {"
0 0 14 3 4 #"race"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 5 #"}}}})"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 19 3 11 #"\"abgiraffe\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; will actually terminate early"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 13 #"run-for-print"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 3 #"} {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"b\""
0 0 24 3 4 #"}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"b"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"giraffe\""
0 0 24 3 3 #"} {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"hello\""
0 0 24 3 5 #"}}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  {"
0 0 14 3 8 #"resolved"
0 0 24 3 2 #" {"
0 0 14 3 4 #"race"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 5 #"}}}})"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 19 3 4 #"\"ab\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;  we would expect promise c to return first before b"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; a doesn't do anything"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";; between promise a and c, even though a is a step ahead of the nes"
 #"ted promise"
) 0 0 24 29 1 #"\n"
0 0 17 3 26 #";; it yields one more time"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 13 #"run-for-print"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 3 #"} {"
0 0 14 3 5 #"yield"
0 0 24 3 4 #"}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"b"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"giraffe\""
0 0 24 3 3 #"} {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"promise-b\""
0 0 24 3 2 #"} "
0 0 21 3 1 #"2"
0 0 24 3 6 #"}}}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"c"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"heidi\""
0 0 24 3 3 #"} {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"promise-c\""
0 0 24 3 2 #"} "
0 0 21 3 1 #"1"
0 0 24 3 5 #"}}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        {"
0 0 14 3 8 #"resolved"
0 0 24 3 2 #" {"
0 0 14 3 4 #"race"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 4 #"race"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 7 #"}}}}}})"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 19 3 23 #"\"heidigiraffepromise-c\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 106
(
 #";; race never dequeues the promise that didn't finish, so continues "
 #"executing after call to race completes"
) 0 0 24 29 1 #"\n"
0 0 17 3 64
#";; so even though the continuation doesn't actually get executed"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; we write to the stdout when we invoke it"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; which means if we have mutation, this might be really bad "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 13 #"run-for-print"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 3 #"} {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"promise-a\""
0 0 24 3 5 #"}}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"b"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"giraffe\""
0 0 24 3 3 #"} {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"promise-b\""
0 0 24 3 2 #"} "
0 0 21 3 1 #"2"
0 0 24 3 6 #"}}}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"c"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"heidi\""
0 0 24 3 3 #"} {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"promise-c\""
0 0 24 3 2 #"} "
0 0 21 3 1 #"1"
0 0 24 3 5 #"}}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        {"
0 0 14 3 8 #"resolved"
0 0 24 3 2 #" {"
0 0 14 3 3 #"all"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 4 #"race"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 7 #"}}}}}})"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 19 3 41 #"\"heidigiraffepromise-cpromise-apromise-b\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";; notice that we still only return the value that resolves first"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"promise-a\""
0 0 24 3 2 #"} "
0 0 21 3 1 #"1"
0 0 24 3 5 #"}}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"b"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"giraffe\""
0 0 24 3 3 #"} {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"promise-b\""
0 0 24 3 2 #"} "
0 0 21 3 1 #"2"
0 0 24 3 6 #"}}}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"c"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"heidi\""
0 0 24 3 3 #"} {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"promise-c\""
0 0 24 3 2 #"} "
0 0 21 3 1 #"3"
0 0 24 3 5 #"}}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              {"
0 0 14 3 8 #"resolved"
0 0 24 3 2 #" {"
0 0 14 3 4 #"race"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 4 #"race"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 7 #"}}}}}})"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";; mutation issues"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"i"
0 0 24 3 2 #" {"
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"b"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"giraffe\""
0 0 24 3 3 #"} {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"promise-b\""
0 0 24 3 3 #"} {"
0 0 14 3 7 #"setbox!"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 7 #"}}}}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"c"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"heidi\""
0 0 24 3 3 #"} {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"promise-c\""
0 0 24 3 3 #"}  "
0 0 21 3 1 #"3"
0 0 24 3 5 #"}}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              {"
0 0 14 3 8 #"resolved"
0 0 24 3 2 #" {"
0 0 14 3 5 #"after"
0 0 24 3 2 #" {"
0 0 14 3 4 #"race"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #"} {"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 3 #"val"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #" {"
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 9 #"}}}}}}}})"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";; need to delay the checking behaviour of after just one more yield"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; to see the mutation effect possibly "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"i"
0 0 24 3 2 #" {"
0 0 14 3 3 #"box"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"b"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"giraffe\""
0 0 24 3 3 #"} {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"promise-b\""
0 0 24 3 3 #"} {"
0 0 14 3 7 #"setbox!"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 7 #"}}}}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"c"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"heidi\""
0 0 24 3 3 #"} {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"promise-c\""
0 0 24 3 2 #"} "
0 0 21 3 1 #"3"
0 0 24 3 5 #"}}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 3 #"} {"
0 0 14 3 8 #"resolved"
0 0 24 3 2 #" {"
0 0 14 3 5 #"after"
0 0 24 3 2 #" {"
0 0 14 3 4 #"race"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #"} {"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 3 #"val"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #" {"
0 0 14 3 5 #"unbox"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 11 #"}}}}}}}}}) "
0 0 17 3 51 #"; delay so that the check is delayed past eval of b"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"18"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"}}"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  {"
0 0 14 3 8 #"resolved"
0 0 24 3 2 #" {"
0 0 14 3 3 #"all"
0 0 24 3 2 #" {"
0 0 14 3 5 #"after"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 3 #"val"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 14 3 1 #"a"
0 0 24 3 4 #"}}})"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"consV"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #") ("
0 0 14 3 5 #"consV"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 3 #"mtV"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 13 #"run-for-print"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 2 #"} "
0 0 21 3 1 #"5"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            {"
0 0 14 3 8 #"resolved"
0 0 24 3 2 #" {"
0 0 14 3 5 #"after"
0 0 24 3 2 #" {"
0 0 14 3 5 #"after"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 3 #"val"
0 0 24 3 3 #"} {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"b\""
0 0 24 3 2 #"} "
0 0 21 3 1 #"4"
0 0 24 3 4 #"}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             {"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 3 #"val"
0 0 24 3 3 #"} {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"c\""
0 0 24 3 6 #"}}}}})"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 19 3 5 #"\"abc\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 2 #"} "
0 0 21 3 1 #"5"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  {"
0 0 14 3 8 #"resolved"
0 0 24 3 2 #" {"
0 0 14 3 5 #"after"
0 0 24 3 2 #" {"
0 0 14 3 5 #"after"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 3 #"val"
0 0 24 3 3 #"} {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"b\""
0 0 24 3 4 #"}  {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 5 #"}}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   {"
0 0 14 3 3 #"fun"
0 0 24 3 2 #" {"
0 0 14 3 3 #"val"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 6 #"}}}}})"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";; using all, we should get a list of values"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 2 #"} "
0 0 21 3 1 #"5"
0 0 24 3 4 #"}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"b"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"giraffe\""
0 0 24 3 2 #"} "
0 0 21 3 1 #"9"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        {"
0 0 14 3 8 #"resolved"
0 0 24 3 2 #" {"
0 0 14 3 3 #"all"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 5 #"}}}})"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"consV"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 5 #"consV"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 3 #") ("
0 0 14 3 3 #"mtV"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"test/pred"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 2 #"} "
0 0 21 3 1 #"5"
0 0 24 3 4 #"}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"b"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"giraffe\""
0 0 24 3 2 #"} "
0 0 21 3 1 #"9"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             {"
0 0 14 3 3 #"all"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 4 #"}}})"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 9 #"promiseV?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 13 #"run-for-print"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 2 #"} "
0 0 21 3 1 #"5"
0 0 24 3 4 #"}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"b"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"giraffe\""
0 0 24 3 2 #"} "
0 0 21 3 1 #"9"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  {"
0 0 14 3 3 #"all"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 4 #"}}})"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";; using race, we should only get one value "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 2 #"} "
0 0 21 3 1 #"5"
0 0 24 3 4 #"}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"b"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"giraffe\""
0 0 24 3 2 #"} "
0 0 21 3 1 #"9"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        {"
0 0 14 3 8 #"resolved"
0 0 24 3 2 #" {"
0 0 14 3 4 #"race"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 5 #"}}}})"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 2 #"} "
0 0 21 3 1 #"5"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"b"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"giraffe\""
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 2 #"} "
0 0 21 3 1 #"9"
0 0 24 3 4 #"}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        {"
0 0 14 3 8 #"resolved"
0 0 24 3 2 #" {"
0 0 14 3 4 #"race"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 5 #"}}}})"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"test/pred"
0 0 24 3 2 #" ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 2 #"} "
0 0 21 3 1 #"5"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"b"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"giraffe\""
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 2 #"} "
0 0 21 3 1 #"9"
0 0 24 3 4 #"}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             {"
0 0 14 3 4 #"race"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 4 #"}}})"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 9 #"promiseV?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 13 #"run-for-print"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"a"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 2 #"} "
0 0 21 3 1 #"5"
0 0 24 3 3 #"}}}"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            {"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"b"
0 0 24 3 2 #" {"
0 0 14 3 7 #"promise"
0 0 24 3 2 #" {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 9 #"print-out"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"giraffe\""
0 0 24 3 3 #"} {"
0 0 14 3 4 #"seqn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"yield"
0 0 24 3 2 #"} "
0 0 21 3 1 #"9"
0 0 24 3 4 #"}}}}"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  {"
0 0 14 3 4 #"race"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 4 #"}}})"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 19 3 2 #"\"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0           0
